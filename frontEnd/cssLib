--------------------------------------------------------------------
flex布局
/*flex布局*/
.flex{display: flex;display: -webkit-flex;}
/*水平轴是主轴 垂直轴是交叉轴*/
/*单根主轴方向*/
.fd-r{flex-direction: row;}
.fd-rr{flex-direction: row-reverse;}
.fd-c{flex-direction: column;}
.fd-cr{flex-direction: column-reverse;}
/*单根换行*/
.fw-n{flex-wrap: nowrap;}
.fw-w{flex-wrap: wrap;}
.fw-wr{flex-wrap: wrap-reverse;}
/*单根主轴对齐方式*/
.jc-fs{justify-content: flex-start;}
.jc-fe{justify-content: flex-end;}
.jc-c{justify-content: center;}
.jc-sb{justify-content: space-between;}
.jc-sa{justify-content: space-around;}
/*单根交叉轴对齐方式*/
.ai-fs{align-items: flex-start;}
.ai-fe{align-items: flex-end;}
.ai-c{align-items: center;}
.ai-b{align-items: baseline;}
.ai-s{align-items: stretch;}
/*多根交叉轴对齐方式*/
/*父层配合fd-r,fw-w。子层配合width:100%。使用*/ 
.ac-fs{align-content: flex-start;}
.ac-fe{align-content: flex-end;}
.ac-c{align-content: center;}
.ac-sb{align-content: space-between;}
.ac-sa{align-content: space-around;}
.ac-s{align-content: stretch;} 
/*item属性*/
/*项目放大比例 默认0*/
.fg-1{flex-grow:1;}
/*项目缩小比例 默认1*/
.fs-0{flex-shrink:0;}
/*优先 项目自动缩放*/
.f-a{flex: auto;}  
/*优先 项目不缩放*/
.f-n{flex: none;}

fd-c纵向布局是不需要用到flex-wrap的，只有横向布局会用到flex-wrap

flex上下固高，中间自适应高度，纵向布局
wrap层 flex fd-c height:100%
.up{} 固高 f-n
.mid{} f-a overflow:auto;
.down{} 固高 f-n

浏览器中input标签有默认宽度 如169px
在flex布局中，要先给input一个小宽度，如width:1px;就能正常使用flex布局了
flex能把input拉宽，但是不能压缩
--------------------------------------------------------------------
/*专属重置样式*/
body, ul, ol, dl, dd, h1, h2, h3, h4, h5, h6, p, form, fieldset, legend, input, textarea, select, button, th, td {
  margin:0;
  padding:0;  
}
div,ul,li,a,p,span,i,h1,h2,h3,header,section,footer,nav,aside,article{
  box-sizing: border-box;
}
--------------------------------------------------------------------
子元素设height:100%是获取不到靠兄弟元素撑开的，未设具体高度的父级的高度的。
普通布局
block属性的div设height:auto是div自身高度
flex布局
flex属性的div设height:auto可以自动获取未设具体高度的父级高度（被兄弟子元素撑开的父级）。
--------------------------------------------------------------------
box-shadow 边框阴影
box-shadow: x轴位置 y轴位置 阴影距离 阴影发散度 阴影颜色 inset内部阴影
x轴位置，y轴位置可负，表示坐标的两端
inset内阴影，x和y坐标需要正负变换
10px 10px 5px 20px pink inset
--------------------------------------------------------------------
css权重
类，属性选择器和伪类选择器 权重相同都是10
class，属性选择器[type=text]，伪类选择器比如 :hover,:focus等
--------------------------------------------------------------------
黄金分割
0.618 约 w/h 5/3
--------------------------------------------------------------------
cursor光标
/*放大光标*/
.plus{cursor:zoom-in;}
/*缩小光标*/
.reduce{cursor:zoom-out;}
--------------------------------------------------------------------
禁止被选中 手机端表现为：不能长按复制
-webkit-user-select:none;
-moz-user-select:none;
-ms-user-select:none;
user-select:none; 
--------------------------------------------------------------------
//通过样式opacity和z-index来控制dom隐藏的另一种方式
$(instance.rArrow).css({'opacity':'0','z-index':'-1'});
避免和样式表里的display属性冲突
-------------------------------------------------------------------- 
图片绝对居中术
<div>
    <img src=''/>
</div>
div{position:relative;}
img{position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;max-height:100%;max-width:100%;}
-------------------------------------------------------------------- 
三角形 向上
.triangle-up{ width: 0; height: 0;
border-width: 0 50px 100px 50px;//设置四边框厚度，左右50，下100    
border-color: black transparent;//四边框颜色，上下黑，左右没色
border-style: solid;//四边框样式}
-------------------------------------------------------------------- 
清除浮动 基于bt4
.clearfix::after{display: block;content: " ";clear: both;}
-------------------------------------------------------------------- 
现代浏览器直接支持css变量
比如
.a{--aaa:red;background:var(--aaa);}检测可行
-------------------------------------------------------------------- 
css3 背景渐变
线性渐变（初始上下）
background: linear-gradient(red, blue);
径向渐变
background: radial-gradient(red, green, blue);
添加角度
background: linear-gradient(90deg, red, blue);
透明度用rgba添加
-------------------------------------------------------------------- 
display:元素的框的类型
-------------------------------------------------------------------- 
background多图片,相隔
<div style="background:url(image/x.png)no-repeat 0% 0%,
url(image/x.png)no-repeat 10% 10%,
url(image/x.png)no-repeat 20% 20%,
url(image/x.png)no-repeat 30% 30%"></div>
-------------------------------------------------------------------- 
去除inline-block元素间距方法 父元素设置font-size: 0;

css的预处理器、后处理器
css的预处理器的框架：
    SASS、LESS和Stylus
    使用扩展语言，编程式书写css
    
CSS后处理器框架：
    还是编写css语法，但是对css进行增强处理
    css压缩工具（clean-css）,Autoprefixer(以Can I Use上的浏览器支持数据为基础，自动处理兼容问题)
    rework和postcss

给定位的元素水平垂直居中
一、margin:auto配合absolute四方位0撑开
二、利用transform相对于自身变形，left,top:50%,transform: translate(-50%,-50%);absolute即可

position:fixed弹窗，页面很矮时，弹窗可滚动
外层fixed层：
    1.不可用table布局flex也不行？
    2.加overflow: auto，因为overflow默认值是visible，不会被裁剪，没滚动条
内层absolute层：
    1.垂直线不能margin:auto,top:0.bottom:0，也不能top:50%,transform: translateY(-50%,-50%)方法垂直居中，这样会强制显示在页面中间，失去自身高度
    2.得top: 15%;margin-bottom: 50px;来设置上下留白，不能居中。
    
伪类添加边框
li{position:relative;}
li:after{content:'';height:2rpx;width:100rpx;background: #e6ecf0;position: absolute;bottom:0;right:0;}
最后一行伪类处理，去边框
li:last-child:after{height:0;}

文字两端对齐
pc:
    p{text-align: justify;text-align-last: justify;}
手机端:
    p{text-align: justify;}
    p:after{content: " ";display: inline-block;width: 100%;}

单边的边框出现与否是由：border-style决定的
如：border-bottom-style:solid 只要下边框

//div内上下等距做法
<div>//div{padding-bottom:20rpx;}
    <p></p>//p{margin-top:20rpx;}
    <p></p>
    <p></p>
</div>

css2.1盒模型中规定
嵌套盒元素（同级或者嵌套），没有非空内容、Padding或Border分隔时，margin共享
所以子元素的margin-top会作用于父元素上
解决办法父元素overflow:auto;//不为visiable即可

裁剪
clip:rect(0rpx 150rpx 150rpx 75rpx)
四个数字是距离上右下左的距离

360度 任意扇形
<div class='wrap'>        
    <div class="leftCir over">
        <div class="leftCirInner"></div>
    </div>
    <div class="rightCir over">
        <div class="rightCirInner"></div>
    </div>        
</div>

.wrap{width:160rpx;height:160rpx;margin: 10rpx;position: relative;}
.over{position: absolute;width:50%;height:100%;overflow: hidden;top:0;}
.leftCir{left:0;}
.rightCir{right:0;}
.leftCirInner,.rightCirInner{width:160rpx;height: 100%;position: absolute;top:0;border-radius:50%;background: red;}

0~180度：
.leftCirInner{left: 0;clip:rect(0 160rpx 160rpx 80rpx);transform: rotate(0deg);}
.rightCirInner{right: 0;clip:rect(0 80rpx 160rpx 0);transform: rotate(30deg);}
180~360度：
.leftCirInner{left: 0;clip:rect(0 160rpx 160rpx 80rpx);transform: rotate(30deg);}
.rightCirInner{right: 0;clip:rect(0 80rpx 160rpx 0);transform: rotate(180deg);}

360度 任意圆环
<div class='wrap'>        
    <div class="leftCir over">
        <div class="leftCirInner"></div>
    </div>
    <div class="rightCir over">
        <div class="rightCirInner"></div>
    </div>        
</div>

.wrap{width:160rpx;height:160rpx;margin: 10rpx;position: relative;}
.over{position: absolute;width:50%;height:100%;overflow: hidden;top:0;}
.leftCir{left:0;}
.rightCir{right:0;}
.leftCirInner,.rightCirInner{width:160rpx;height:100%;position: absolute;top:0;border-radius:50%;border:20rpx solid transparent;transform: rotate(-135deg);}

0~180度：（为了兼容iphone的双倍屏，rotate为奇数的情况，把0改为2rpx）
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(-105deg);}
180度：
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(45deg);}
180~360度：
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;transform: rotate(-105deg);}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(45deg);}
360度：
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;transform: rotate(45deg);}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(45deg);}

圆环显示进度效果
<div class='wrap'>        
    <div class="leftCir over">
        <div class="leftCirInner"></div>
    </div>
    <div class="rightCir over">
        <div class="rightCirInner"></div>
    </div>     
    <!--底层  -->
    <div class='floor'>12%</div>
</div>
.wrap{width:160rpx;height:160rpx;margin: 10rpx;position: relative;}
.over{position: absolute;z-index: 20;;width:50%;height:100%;overflow: hidden;top:0;}
.leftCir{left:0;}
.rightCir{right:0;}
.leftCirInner,.rightCirInner{width:160rpx;height:100%;position: absolute;top:0;border-radius:50%;border:20rpx solid transparent;transform: rotate(-135deg);}
.leftCirInner{left: 2rpx;border-bottom:20rpx solid #F56C6C;border-left:20rpx solid #F56C6C;}
.rightCirInner{right: 2rpx;border-top:20rpx solid #F56C6C;border-right:20rpx solid #F56C6C;transform: rotate(-105deg);}
.floor{position: absolute;width:100%;height:100%;z-index: 10;border-radius: 50%;border:20rpx solid #e0e0e0;text-align: center;line-height: 120rpx;}

当有全屏遮罩时，虽然某z-index层级比遮罩高，但是没背景颜色也会显示遮罩，至少要加个背景为白色

nth-child和nth-of-type
nth-child(1)是从父级选第一个子节点，看匹配否
nth-of-type(1)是从父级选第一个特定子节点

每4个，给特定样式
p:nth-child(4n){...}

直接div高度100%
html,body,#app,#app>div{
  height: 100%
}

background缩写
.wrap{background:red url('../../assets/login/beijing.jpg') no-repeat center center/100% 100%;height:100%;};
格式：
bg-color bg-img bg-repeat bg-position/bg-size

transform: translate(-50%, -50%)出现的模糊与抖动问题
办法transform: translate3d(-50%, -50%, 0) 解决抖动
最外层高度为偶数 解决模糊

animate.css 常用的css库
class='animated xxx'
如要循环执行，加上'infinite'

1.  bounce             弹跳
2.  flash              闪烁
3.  pulse              放大，缩小
4.  rubberBand         放大，缩小，弹簧
5.  shake              左右晃动
6.  headShake          左右小幅晃动
7.  swing              左右扇形摇摆
8.  tada               放大，左右上下晃动，缩小
9.  wobble             左右小幅(圆点较远)扇形摇摆
10. jello              左右左右上下晃动

11. bounceIn           重复放大缩小
12. bounceInDown       从上到下出现，弹簧
13. bounceInLeft       从左到右出现，弹簧
14. bounceInRight      从右到左出现，弹簧
15. bounceInUp         从下到上出现，弹簧
16. bounceOut          从常规到小消失，弹簧
17. bounceOutDown      从常规到小，从下方消失，弹簧
18. bounceOutLeft      从常规到小，从左方消失，弹簧
19. bounceOutRight     从常规到小，从右方消失，弹簧
20. bounceOutUp        从常规到小，从上方消失，弹簧

21. fadeIn             渐现
22. fadeInDown         渐现，从上到下
23. fadeInDownBig      渐现，从上到下，滑动距离较长
24. fadeInLeft         渐现，从左到右
25. fadeInLeftBig      渐现，从左到右，滑动距离较长
26. fadeInRight        渐现，从右到左
27. fadeInRightBig     渐现，从右到左，滑动距离较长
28. fadeInUp           渐现，从下到上
29. fadeInUpBig        渐现，从下到上，滑动距离较长
30. fadeOut            渐隐
31. fadeOutDown        渐隐，从上到下
32. fadeOutDownBig     渐隐，从上到下，滑动距离较长
33. fadeOutLeft        渐隐，从左到右
34. fadeOutLeftBig     渐隐，从左到右，滑动距离较长
35. fadeOutRight       渐隐，从右到左
36. fadeOutRightBig    渐隐，从右到左，滑动距离较长
37. fadeOutUp          渐隐，从下到上
38. fadeOutUpBig       渐隐，从下到上，滑动距离较长

39. flip               中心Y轴旋转，放大，缩小
40. flipInX            元素中心X轴旋转
41. flipInY            元素中心Y轴旋转
42. flipOutX           中心X轴旋转，消失
43. flipOutY           中心Y轴旋转，消失

44. lightSpeedIn       从右到左，平行四边形，左上角突出进入
45. lightSpeedOut      从左到右，平行四边形，左上角突出进入

46. rotateIn           元素中心顺时针旋转进入
47. rotateInDownLeft   元素左外长半径顺时针旋转进入
48. rotateInDownRight  元素右外长半径逆时针旋转进入
49. rotateInUpLeft     元素左外长半径逆时针旋转进入     
50. rotateInUpRight    元素右外长半径顺时针旋转进入
51. rotateOut          元素中心顺时针旋转消失
52. rotateOutDownLeft  元素左外长半径顺时针旋转消失
53. rotateOutDownRight 元素右外长半径逆时针旋转消失
54. rotateOutUpLeft    元素左外长半径逆时针旋转消失
55. rotateOutUpRight   元素右外长半径顺时针旋转消失

56. hinge              从右上到坐下，顺时针旋转，从上到下消失

57. rollIn             元素左外长半径顺时针旋转，平滑进入
58. rollOut            元素右外长半径顺时针旋转，平滑进入

59. zoomIn             元素由小变大进入
60. zoomInDown         元素由小变大，从上方进入
61. zoomInLeft         元素由小变大，从左方进入
62. zoomInRight        元素由小变大，从右方进入
63. zoomInUp           元素由小变大，从下方进入
64. zoomOut            元素由大变小，消失
65. zoomOutDown        元素由大变小，从下方消失
66. zoomOutLeft        元素由大变小，从左方消失
67. zoomOutRight       元素由大变小，从右方消失
68. zoomOutUp          元素由大变小，从上方消失

69. slideInDown        元素从上到下，平滑进入
70. slideInLeft        元素从左到右，平滑进入
71. slideInRight       元素从右到左，平滑进入
72. slideInUp          元素从下到上，平滑进入
73. slideOutDown       元素从上到下，平滑消失
74. slideOutLeft       元素从右到左，平滑消失
75. slideOutRight      元素从左到右，平滑消失
76. slideOutUp         元素从下到上，平滑消失

转自：https://www.jianshu.com/p/75db347da9ba

如果要设置先后执行，在dom上设置
style="animation-delay:.5s;"
style="animation-delay:1s;"

做滚动到固定位置出现效果，只需隐藏大块，然后滚动到特定位置让大块出现即可，里面所有的animate.css的效果都会加载

在根元素上加如fadeIn，可以使页面切换有fadeIn效果

calc()是css3的一个新增的功能，用来指定元素的长度，你可以使用calc()给元素的border、margin、pading、font-size和width等属性动态的设置值

当父元素flex:auto的时候，子元素通过height:100%是不能够获取高度的，
解决办法：
1.给父元素flex fd-c，子元素f-a即可
2.定位法，慎用，用了定位手机端滑动容易出问题
父元素position:relative;
子元素position:absolute;width:100%;height:100%;

左右布局，宽度计算
左：width: 207px;
右：width: calc(100% - 207px); //'-'前后要有空格

flexible不兼容ipad

移动端ui框架都是375的基准，目的在于方便使用者转单位

移动端单位总结：
1.全px布局 loader
只需适配移动端，ui库、自己代码全用px也行
一、但是需要loader，或者sass/less函数把自己代码按（设计稿/375）比例缩小
二、用loader把ui库单位比例放大

2.lib-flexible+pxtorem+loader或者postcss-px-to-viewport+loader
lib-flexible：
lib-flexible设了之后就不用设meta了，它会设动态meta，安卓机缩放是1，ios机缩放是0.5，所有rem单位不会受影响，px单位会变化

lib-flexible就是把根节点字体大小设为屏幕宽度的(1/10)px，比如安卓360就是36px，苹果375就是75px

pxtorem：
pxtorem就是把px转为rem
两种方案：
一、按照ui框架基准设remUnit为37.5
写loader或sass/less函数把自己代码px缩小，再一起转rem
二、按照设计稿基准设remUnit为如75
写loader把ui库px按比例放大，再一起转rem

总之：自己的代码和ui库的单位，px和rem要统一

vux框架可以在vux-loader里的'style-parser'插件里设置转换px前的数字
vux-loader里的插件是处理用户代码的，不处理ui框架代码。

在外层高度一定，内层用margin:auto;也可以进行上下纵向的margin居中？

弹出层插件里再套弹出层插件时，position:fixed套position:fixed或者relative还是absolute，容易出现问题。
所以把弹出层放到popup等组件外面，避免弹出层嵌套。
在ios中popup套popup非常容易出错

解决ios点击元素后出现阴影或闪烁的问题
-webkit-tap-highlight-color: transparent;

页面设置了'lib-flexible'时，页面上不设meta，lib-flexible会自动识别是否双倍屏自动设meta，来改变viewport

但是移动端用了ui框架时，还是得自己把meta设死成1:1，用了lib-flexible，写死px的ui框架会在ios端缩小一倍

关于touchmove默认事件报错参照
https://www.cnblogs.com/chenzeyongjsj/p/7239326.html

解决办法
一、html{touch-action:none;}//貌似说安卓会无法滚动？
二、elem.addEventListener(
  'touchstart',
  fn,
  { passive: false }
);

另外貌似
html {
    touch-action: manipulation;
}
可以解决移动端click 300ms延迟的问题

transition过渡效果
能在具值间过渡，无法在具值到'auto'间过渡

css 判断横竖屏
@media all and (orientation: landscape) {
    .echartsPop {
        background-color: lightblue !important;
    } /*横屏时*/
}

@media all and (orientation: portrait) {
    .echartsPop {
        background-color: red !important;
    } /*竖屏时*/
}

左侧竖条文字90度旋转布局
左侧条，里面内建width:100vh的内div，内div顺时针按旋转点left top，旋转90度，使里面的文字成功旋转布局
demo:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
    *{margin: 0;padding: 0;}
    html,body,.wrap{height: 100%;}
    .wrap{display: flex;}
    .wrap>div{height: 100%;}
    .left{width: 50px;background: #c5aeae;}
    .center{flex:auto;background: #73dacc;}
    .right{flex:none;background: #4d6881;}
    .warpper{width: 100vh;height: 50px;transform: rotate(90deg) translateY(-100%);transform-origin:left top;display: flex;justify-content: center;align-items: center;}    
    p{margin: 0 20px;}
    </style>
</head>
<body>
    <div class='wrap'>
        <div class='left'>
            <div class='warpper'>
                <p>啊啊啊啊啊</p>            
                <p>哦哦哦哦哦</p>
            </div>
        </div>
        <div class='center'>2</div>
        <div class='right'>3</div>
    </div>
</body>
</html>

单行省略号：
overflow: hidden;
white-space: nowrap;
text-overflow: ellipsis;
-----------
css自定义属性，级联变量（变量只能用作属性值）
--a: red;
color: var(--a);

定义全局变量
:root{
    --a: red;
}

局部变量
p{
    --a1: red;
}
-----------