-------------------------------------------------------------------
cnpm安装多个模块方法 cnpm install --save axios vuex 空格隔开就行
-------------------------------------------------------------------
通过node环境 依赖node_modules包的项目，node_modules不必提交到git上。
如果git上有，拉取后删了通过cnpm install rimraf -g安装，然后rimraf node_modules删除node_modules文件夹。
再cnpm install，再运行就不会报错了。
-------------------------------------------------------------------
使用$ npm install -g cnpm --registry=https://registry.npm.taobao.org时，有时cnpm不是最新版本
推荐使用下一种方法：
通过添加 npm 参数 alias 一个新命令，此方法资源更新
alias cnpm="npm --registry=https://registry.npm.taobao.org \
--cache=$HOME/.npm/.cache/cnpm \
--disturl=https://npm.taobao.org/dist \
--userconfig=$HOME/.cnpmrc"
-------------------------------------------------------------------
package.json npm的配置文件
-------------------------------------------------------------------
package-lock.json作用
锁定安装时的包的版本号，并且需要上传到git，以保证其他人在npm install时大家的依赖能保证一致
package-lock.json 是在 `npm install`时候生成一份文件，用以记录当前状态下实际安装的各个npm package的具体来源和版本号。
package.json文件只能锁定大版本，也就是版本号的第一位，并不能锁定后面的小版本

想要看一个组件支不支持npm包引入，可以点入右侧homepage和repository栏，看它的github官网，看readme里有没有npm引入

通过npm点入右侧homepage和repository栏，看它的官网和主页

貌似npm包引入名，和安装名相同
如：
npm i install -S 'animate.css'
import 'animate.css'

npm i install -S 'axios'
import axios from 'axios'即可

npm i -S 即 npm i -save     写入dependencies    生产环境
npm i -D 即 npm i -save-dev 写入devDependencies 开发环境

npm i 会下载两个环境的依赖
npm install --production 只安装生产环境依赖，不需要调试开发的话

webpack npm run build时打包项目里引用的部分

axios返回的数据在res.data里 套了一层

axios不支持jsonp

fetch-jsonp //会自动在api后加上callback参数
fetchJsonp('...').then((response)=>{
  // 处理数据
  return response.json()
}).then((json)=>{
  console.log('parsed json',response);
}).catch((ex)=>{
  console.log('parsing failed',ex);
})

npm i后面加@，安装指定版本
如：
npm install less@2.7.1 -g

npx临时安装包，不污染全局

npm i -D webpack
npx webpack -v
npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你安装

npx http-server 可以一句话帮你开启一个静态服务器
npx http-server

postcss-px2rem或postcss-pxtorem把px转为rem
下面一堆代码动态改变根节点字体大小
// 根节点动态字体大小
! function (e, t) {
  function n() {
    t.body ? t.body.style.fontSize = 12 * o + "px" : t.addEventListener("DOMContentLoaded", n)
  }

  function d() {
    var e = i.clientWidth / 10;
    i.style.fontSize = e + "px"
  }
  var i = t.documentElement,
    o = e.devicePixelRatio || 1;
  if (n(), d(), e.addEventListener("resize", d), e.addEventListener("pageshow", function (e) {
      e.persisted && d()
    }), o >= 2) {
    var a = t.createElement("body"),
      s = t.createElement("div");
    s.style.border = ".5px solid transparent", a.appendChild(s), i.appendChild(a), 1 === s.offsetHeight && i.classList
      .add("hairlines"), i.removeChild(a)
  }
}(window, document);

npm升级
npm install npm -g

安装n模块
npm install -g n --force

升级node.js到最新稳定版本
打开cmd查看你之前node版本安装的路径，where node
直接去官网下载与你电脑系统（32位还是64位）对应的最新的mis版本,安装在上述路径中覆盖即可。
node -v,发现更新到最新版本了。

显示npm install安装明细
npm config set loglevel=http
npm config set loglevel=info
会看到所有的http请求
或者：
npm -d 即是 npm --loglevel info
npm -dd 即是 npm --loglevel verbose
npm -ddd 即是 npm --loglevel silly

发生问题
npm WARN checkPermissions Missing write access to 
丢失写入权限，把原有node_modules删掉，重装就行。
或者用cmd

查看已安装全局模块
npm ls -g --depth 0

npm报错，似乎是从Error:开始看

貌似在u盘上没法npm install，
电脑上硬盘格式是NTFS的，u盘是FAT32的

Fastclick包移除移动端点击延迟。但是有bug，会导致input，textarea等无法获取光标

anywhere -g
anywhere 在当前目录生成一个静态文件服务器

npm init -y 初始化并直接yes

mkdir xxx 生成文件夹

在包的package.json中设置"private": true，则npm会拒绝发布它

npx webpack --config webpack.config.js
npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你安装！

storejs 存取对象
storejs.set('userInfo',userInfo);
storejs.get('userInfo');

px2rem貌似不支持小数形式，如14.24px这种会转换错误

postcss-pxtorem
"postcss-pxtorem": {
  "rootValue": 75,
  "propList":["*"],
  "selectorBlackList":["mint-"],
  //minPixelValue避免转化1px  或者写成1PX,1Px也能避免转化
  "minPixelValue": 2
}

url 模块
获取url上的传统传参
url.parse('?id=1',true);
response.query=>{id:1}

browserslist
只要在package.json里加上browserslist
{// package.json
  "browserslist": [ // 注意：是一个数组对象
    "> 1%",
    "last 2 versions"
  ] 
}
用于在不同前端工具之间共享目标浏览器和Node.js版本的配置

polyfill 垫片，抚平不同浏览器之间对js实现的差异
shim做垫片的一种方式：仅靠旧环境中已有的手段实现新的API
如promise-polyfill，轻量promise垫片
@babel/polyfill包含所有js新语法的垫片

-S === --save 放在生产环境dependencies
-D === --save-dev 放在开发环境devDependencies

npm命令
npm root //查看当前项目依赖的安装路径