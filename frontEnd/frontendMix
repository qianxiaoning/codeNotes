---------------------------------------------------------------------------------
针对ie浏览器的加载
<!--[if lt IE 9]>
    <script src="js/html5.js"></script>
    <script src="js/respond.min.js"></script>
<![endif]-->
---------------------------------------------------------------------------------
只对部分安卓有效
微信的内置浏览器，分享页面地址到系统内置浏览器时，只会记住网站入口页面，js框架的路由的子页面是不会被记住的，比如#/alipaying。解决办法是用window.location.href = window.location.origin + '/#/alipaying?returnUrl=' + res.data.data;进行一次页面跳转操作，这样可以更新入口页面。
window.history.pushState({},null,url)方法也对ios不起作用
目前的解决办法只有跳到子页面，更新页面入口。
---------------------------------------------------------------------------------
微信内置浏览器清除缓存
针对安卓有效
打开一个聊天窗口，输入debugx5.qq.com 并发送，然后点击，拖到最下面选择清除缓存。 
---------------------------------------------------------------------------------
seo搜索引擎，通过url抓取html代码,一般不走js。
cshtml,jsp,aspx都是后台动态页面文件 前后端一体，不利维护。但是不走前台js，直接后台动态生成好html页面，利于seo。
html+js 前后端分离，但是不能组件化复用、数据绑定。不利于seo优化。
mvvm框架 完全可以实现后台动态页面的功能，如组件化复用、数据绑定。但是不利于seo优化。
最好方案：
mvvm+node服务器直出
通过node实现：后台=》node渲染好页面=》url=>前端，提前渲染好html。
---------------------------------------------------------------------------------
玩友时代收获
linux指令 操作git和cmd
electron框架做跨平台pc应用
用node socket通讯协议
用node 内嵌式数据库sqlite3
es6语法 let 箭头函数 promise异步
h5 ajax以文件流的方式传输form信息 formData
---------------------------------------------------------------------------------
生产环境，项目怎么避免跨域的
1.后台设置nginx反向代理，用户访问nginx，由nginx连接前端文件和后台文件，调在nginx设置的域名下完成访问。
2.后台设置cors访问白名单，放自己的域名，只自己的域名能够访问

前端拿着唯一的token去找后台，后台才知道我什么身份，而且不易被冒充身份，安全，不容易被攻击
一般方式有前端在header加入token，或后台set入cookie两种
后台set入cookie两种在多域名接口不适用，因为不同域cookie不共用（但是可通过nginx实现跨域）。header加入token可不存在这个问题

屏幕取色工具colorpix

windows上常用的量尺寸软件 pxcook

animate.css 常用的css库

chrome解决浏览器跨域问题
老方法：
1.加 --args --disable-web-security
关闭chrome，在快捷方式里属性里加 --args --disable-web-security
48版本后失效
新方法：
2.装Allow-Control-Allow-Origin.crx插件
打开即可跨域

解决后台接口限制跨域访问问题
配中间层

配nginx反向代理
http{
    server{
        listen  80;#本地域名端口
        server_name  localhost;#本地域名

        location / {
            proxy_pass http://localhost:8080; #前端页面地址
            proxy_redirect default;
        }

        location /apis { #添加访问目录为/apis的代理配置
			rewrite  ^/apis/(.*)$ /$1 break;# 监听所有/apis前缀，实则转发后台api接口地址
			proxy_pass   http://a.cloud.cn/api/; #后台接口地址
        }        
    }
}
解释：
location 为本地域名如：localhost:8080
location /apis就重写为localhost:8080/apis/xxx 实则转发http://a.cloud.cn/api/xxx的接口地址

vue-cli 自带的node中间层转发 实际似乎也是http-proxy-middleware这个包
config/index.js里
module.exports = {
    dev:{
        proxyTable: {
            '/api': {                            
                target: 'http://a.cloud.cn',//接口地址                
                changeOrigin: true,
                secure: false,
                pathRewrite: {
                    '^/api': ''//将接口地址重写为api
                }
            }
        },
    }
}
axios.defaults.baseURL = '/api';
//axios.defaults.baseURL = process.env.API_ROOT+'';

webpack自己起 装http-proxy-middleware这个包
import proxy from 'http-proxy-middleware';
module.exports = {
    devServer: {
		contentBase: path.resolve(__dirname, "dist"),
		host: "localhost",  // win8 下自启浏览器可能是因为没设置为localhost
		port: "8091",
		open: true, // 开启浏览器
		hot: true,  // 开启热更新
        disableHostCheck: true,
        proxy: {
            '/apis': {
                target: 'http://a.cloud.cn/api/',//接口地址    
                changeOrigin: true,
                pathRewrite: {
                    '^/apis': ''//将接口地址重写为api
                }
            }
        }
	}
}

I Doc View常见文件在线预览
示例：
http://api.idocv.com/view/url?url=http%3A%2F%2Fapi.idocv.com%2Fdata%2Fdoc%2Fmanual.docx 

SweetAlert弹窗插件

jq mobiscroll jq插件库

store(key, data);是用来存字符串数据的

混合开发，在native中嵌入WebView，写h5
本质就是在native中启动一个浏览器（一般是默认浏览器），在里面展示h5页面

viewport的meta
宽度，缩放比例，最大缩放，最小缩放，禁用缩放
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0,user-scalable=0" />

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=0">

页面上的点击展开更多，按钮上一条线还带模糊效果，
作用：为了使页面简短些，比如看评论区，相关链接方便，不用拖很久。不是为了减缓请求时间
html结构:
div.textBlock //position:relative
    div.text.fold //.fold{height:11rem;overflow:hidden;}
    div.dropDown //见下
        i //下拉箭头icon

csdn的写法是 纯css，主要通过
.dropDown{
    background-image: linear-gradient(-180deg,rgba(255,255,255,0) 0%,#fff 70%);padding-top:160px;position: absolute;bottom: -1px;width: 100%;z-index: 20;text-align:center;
}
写的

在pc chrome浏览器 ios模拟器时 用了'lib-flexible'自动设的meta时
height设与没设 会影响font-size大小
在安卓/ios真机均没问题，估计是pc chrome ios模拟器渲染模式问题

详情页的文章，文字图片形式一般在后台以富文本形式输入，
通过接口返回给前端，是带html标签的字符串，前端直接类似eval/Function渲染出来

关于emoji表情，完全是前端的，后台只存对应的字符串

页面跳转传值方法：
1.get url传值
2.localstorage
3.动态路由，在路由守卫上传值

在数据驱动的框架里，如'vue, react'
一般在dom渲染前进行数据请求，防止重复渲染
vue中:
在creacted中请求数据
需要操作dom的，才放到mounted

react中：
在constructor中请求数据初始化
需要操作dom的，才放到componentDidMount
另外eslint规则中：
似乎还要给初始化请求具名函数，方便不需要组件时取消该请求函数

echarts 数据空值
当某数据不存在时（ps：不是0），可以用 '-' 或者 null 或者 undefined 或者 NaN 表示
无数据在折线图中可表现为该点是断开的，在其它图中可表示为图形不存在。

input readOnly 也能进行focus和blur事件
disabled的不行

微信公众号h5开发 web接口
1.引入'weixin-js-sdk';   //微信js工具包
2.通过config接口注入权限验证配置
所有需要使用JS-SDK的页面必须先注入配置信息

同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复

3.通过ready接口处理成功验证
对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。
比如：调用相机或者相册

4.调用方法

在手机微信公众号中就能调用相关方法
感觉类似混合开发，这是微信原生暴露给h5 js的方法

现在新版分享接口似乎无效 updateAppMessageShareData 
改用老的可以wx.onMenuShareAppMessage

分享接口里面的link参数
link: linkUrl, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
所以必须是完整路径，含有域名，且一致

修改google浏览器颜色展示方式，rgba切十六进制
点颜色块，上下切换

前端-Request Headers-content-type
前端http请求时，发送给后台的请求头Request Headers里的content-type是设定前端发送的数据格式，一般为json，如果是input type='file'，为文件流格式

'application/json; charset=utf-8' json格式
'text/plain; charset=utf-8' 纯文本
'multipart/form-data' 上传文件

get请求参跟在url后面，与Request Headers-content-type无关
post请求要设定对应的content-type格式

在ios上看alert出的obj对象
当在ios上调试时，由于看不到console日志，alert看不到对象，
解决办法alert(JSON.stringify(obj)); 对象转成字符串即可

echart移动端横屏展示
方法：
1.echarts坐标轴设置
横屏正常显示。竖屏x轴位置顶部position:top,y轴反向显示inverse:true
2.echarts放入iframe，再rotate旋转iframe

触发方法：
1.window.onresize触发比较屏幕宽高
2.监听横竖屏事件
---------------------------
google浏览器-sources查找运行的js文件
ctrl+o，输入js文件名