---------------
Azkaban
Azkaban（轻）与oozie（重）对比
市面上最流行的两种工作流调度系统

简单调度：
Linux的Crontab

一个完整的数据分析系统通常都是由大量任务单元组成：
Shell脚本程序，Java程序，MapReduce程序、Hive脚本等

大数据工作流调度流程：
某业务系统每天产生20G原始数据，我们每天对其进行处理
1.先将原始数据同步到HDFS上
HDFS
2.对原始数据进行计算
MapReduce
3.生成的数据以分区表形式存储到多张Hive表中
[Hive表，Hive表，Hive表]
4.对Hive中多个表的数据进行JOIN处理，得到一张明细数据Hive大表
明细数据Hive大表
5.将明细数据进行复杂的统计分析，得到结果报表信息
结果报表
6.将统计分析得到的结果数据同步到业务系统中
业务系统

Azkaban集群部署
web-server,exec-server,mysql
将
azkaban-db-3.84.4.tar.gz
azkaban-exec-server-3.84.4.tar.gz
azkaban-web-server-3.84.4.tar.gz
上传至/opt/software/azkaban/
解压至/opt/module/azkaban/下

mv azkaban-exec-server-3.84.4 azkaban-exec
mv azkaban-web-server-3.84.4 azkaban-web

mysql -uroot -proot
create database azkaban;
use azkaban;

source /opt/module/azkaban/azkaban-db-3.84.4/create-all-sql-3.84.4.sql;

show tables;

quit;

修改mysql允许包大小，防止azkaban连接mysql阻塞
sudo vim /etc/my.cnf
在[mysqld]下面加上
max_allowed_packet=1024M

重启mysql
sudo systemctl restart mysqld
完成数据库初始化

配置ExecutorServer
cd /opt/module/azkaban/azkaban-exec/conf
vim azkaban.properties
default.timezone.id=Asia/Shanghai
azkaban.webserver.url=http://bigData101:8081
mysql.host=bigData101
mysql.user=root
mysql.password=root
最后添加executor.port=12321//不指定的话，每次都会是随机值，不方便管理

启动executor
cd /opt/module/azkaban/azkaban-exec
bin/start-exec.sh
// 停止命令bin/shutdown-exec.sh
// 把azkaban.properties里的相对路径改为绝对路径后，就能不用进目录再执行了，如conf/...

ll 查看当前目录下是否有executor.port文件，有说明启动成功，没有就查看日志

激活executor
向服务发送一个get请求即可
curl -G "bigData101:12321/executor?action=activate" && echo

配置Web Server
cd /opt/module/azkaban/azkaban-web/
vim conf/azkaban.properties
default.timezone.id=Asia/Shanghai
mysql.host=bigData101
mysql.user=root
mysql.password=root
azkaban.executorselector.filters=StaticRemainingFlowSize,CpuStatus // 多executor时设置，az选择器挑选机制：StaticRemainingFlowSize目前排队任务数最少，MinimumFreeMemory最小内存限制6G(会导致任务无法执行)，CpuStatus cpu使用率最低
vim conf/azkaban-users.xml用户、权限管理文件
添加
<user password="root" roles="admin" username="shonqian"/>
启动
bin/start-web.sh
// 停止 bin/shutdown-web.sh

访问
http://bigdata101:8081/
登录
shonqian
root

在windows上
新建first.project
azkaban-flow-version: 2.0

新建first.flow
nodes:
  - name: jobA
    type: command
    config:
      command: echo "Hello World"

两个打包在一起，zip格式

右上角，Create Project

upload上传那个zip压缩包

点Execute Flow

左边Schedule定时调度
右边Execute立即执行

job每一个工作单元
flow所有工作单元组成的工作流

日志排查在Job List里的Log里

first.project文件内容固定，确定flow版本
first.flow文件（可properties和yaml两种格式）

yaml：
1.大小写敏感
2.缩进表示层级
3.不能用tab，用空格
4.缩进空格数不重要，相同层级元素要左侧对齐
5.#表示注释

yaml语法：
对象：{name:zhangsan,age:18}
name: zhangsan
age: 18
数组：[a,b,c]
- a
- b
- c
对象数组：[{name:zhangsan,age:18},{name:zhangsan,age:18},{name:zhangsan,age:18}]
- name: zhangsan
  age: 18
- name: zhangsan
  age: 18
- name: zhangsan
  age: 18
---------------
xxl-job 2.3.0
分布式任务调度平台

使用教程：
1.下载源码
2.执行项目里的建表sql语句 /xxl-job/doc/db/tables_xxl_job.sql
3.配置调度中心项目 xxl-job-admin
修改配置文件 /xxl-job/xxl-job-admin/src/main/resources/application.properties
填写端口号
填写数据库地址
报警邮箱
4.启动调度中心，默认登录密码 admin/123456
5.调度中心集群配置
配置文件中：
数据库地址一致（数据库有主从，都走主）
服务器时间一致
6.把自己的项目变为执行器
6.1.pom中添加xxl-job-core依赖
6.2.配置文件添加配置
### 调度中心部署根地址 [选填，自动注册需要]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
xxl.job.admin.addresses=http://127.0.0.1:8080/xxl-job-admin
### 执行器通讯TOKEN [选填]：执行器accessToken和调度中心accessToken一致
xxl.job.accessToken=xxx
### 执行器AppName [选填，自动注册需要]：执行器心跳注册分组依据；为空则关闭自动注册
xxl.job.executor.appname=xxl-job-executor-sample
### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
xxl.job.executor.address=
### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
xxl.job.executor.ip=
### 执行器端口号：与项目端口不同，小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
xxl.job.executor.port=0
### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler
### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；
xxl.job.executor.logretentiondays=30
6.3.添加配置文件类XxlJobConfig.java
@Configuration
public class XxlJobConfig {
    private Logger logger = LoggerFactory.getLogger(XxlJobConfig.class);

    @Value("${xxl.job.admin.addresses}")
    private String adminAddresses;

    @Value("${xxl.job.accessToken}")
    private String accessToken;

    @Value("${xxl.job.executor.appname}")
    private String appname;

    @Value("${xxl.job.executor.address}")
    private String address;

    @Value("${xxl.job.executor.ip}")
    private String ip;

    @Value("${xxl.job.executor.port}")
    private int port;

    @Value("${xxl.job.executor.logpath}")
    private String logPath;

    @Value("${xxl.job.executor.logretentiondays}")
    private int logRetentionDays;

    @Bean
    public XxlJobSpringExecutor xxlJobExecutor() {
        logger.info(">>>>>>>>>>> xxl-job config init.");
        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();
        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);
        xxlJobSpringExecutor.setAppname(appname);
        xxlJobSpringExecutor.setAddress(address);
        xxlJobSpringExecutor.setIp(ip);
        xxlJobSpringExecutor.setPort(port);
        xxlJobSpringExecutor.setAccessToken(accessToken);
        xxlJobSpringExecutor.setLogPath(logPath);
        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);
        return xxlJobSpringExecutor;
    }
}
6.4.执行器集群配置
执行器回调地址（xxl.job.admin.addresses）需要保持一致
AppName（xxl.job.executor.appname）需要保持一致
7.任务调度中心web端
7.1.执行器管理
新增执行器，AppName对应执行器中xxl.job.executor.appname，前面配好了此处用自动注册方式
7.2.任务管理
7.2.1.新增任务
选择执行器-运行模式（BEAN或者GLUE模式）
BEAN方法模式：
代码中新建类
@Component
public class SampleXxlJob {
    private static Logger logger = LoggerFactory.getLogger(SampleXxlJob.class);
    /**
     * 1、简单任务示例（Bean模式）
     */
    @XxlJob("demoJobHandler", init = "init", destroy = "destroy")
    public void demoJobHandler() throws Exception {
        // 输出日志
        XxlJobHelper.log("XXL-JOB, Hello World.");
        // 获取分片参数
        int shardIndex = XxlJobHelper.getShardIndex();
        int shardTotal = XxlJobHelper.getShardTotal();
        // 获取入参
        String param = XxlJobHelper.getJobParam(); 
        // 设置任务结果 XxlJobHelper.handleFail/handleSuccess
        XxlJobHelper.handleSuccess();

        for (int i = 0; i < 5; i++) {
            XxlJobHelper.log("beat at:" + i);
            TimeUnit.SECONDS.sleep(2);
        }
        // default success
    }
    public void init(){
        logger.info("init");
    }
    public void destroy(){
        logger.info("destroy");
    }
}
输入JobHandler，对应@XxlJob注解中名字

GLUE模式：
不需要输入JobHandler
添加完后打开GLUE IDE，在线编辑代码，可使用@Resource/@Autowire注入执行器里中的其他服务
package com.xxl.job.service.handler;

import com.xxl.job.core.context.XxlJobHelper;
import com.xxl.job.core.handler.IJobHandler;

public class DemoGlueJobHandler extends IJobHandler {
	@Override
	public void execute() throws Exception {
		XxlJobHelper.log("XXL-JOB, Hello World.");
	}
}
7.2.2.执行一次
7.2.3.启动任务
7.2.4.查询日志-跳调度日志
7.3.调度日志
执行日志-查看具体日志内容
8.分片广播 & 动态分片 使用场景
分片任务场景：10个执行器的集群来处理10w条数据，每台机器只需要处理1w条数据，耗时降低10倍；
广播任务场景：广播执行器机器运行shell脚本、广播集群节点进行缓存更新等
---------------