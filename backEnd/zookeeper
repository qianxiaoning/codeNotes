-----------
zookeeper注册中心
zookeeper，自动化服务调度器

在linux安装java.jdk
cd /usr/local/src/
上传zookeeper安装文件
拖入zookeeper-3.4.14.tar.gz
解压tar -xvf zookeeper-3.4.14.tar.gz
rm -rf zookeeper-3.4.14.tar.gz
改名mv zookeeper-3.4.14 zookeeper
创建zookeeper信息和日志文件夹
cd zookeeper/
mkdir data log
复制配置文件并改名
cd conf/
cp zoo_sample.cfg zoo.cfg
vim zoo.cfg
配置数据、日志文件夹
dataDir=/usr/local/src/zookeeper/data
dataLogDir=/usr/local/src/zookeeper/log

cd ../bin/
启动sh zkServer.sh start
查看状态 sh zkServer.sh status
关闭sh zkServer.sh stop

搭建zookeeper集群，3台
zookeeper功能一样，redis有扩容作用
cd ..
mkdir zkCluster
cd zkCluster/
mkdir zk1 zk2 zk3
在zk1 zk2 zk3中创建data,log文件夹
mkdir {zk1,zk2,zk3}/{data,log}
标识文件myid
vim zk1/data/myid，输入1
vim zk2/data/myid，输入2
vim zk3/data/myid，输入3

cd ../../../conf/
准备3个配置文件
cp zoo.cfg zoo1.cfg
vim zoo1.cfg

dataDir=/usr/local/src/zookeeper/zkCluster/zk1/data
dataLogDir=/usr/local/src/zookeeper/zkCluster/zk1/log
# the port at which the clients will connect
clientPort=2181
ip:通信端口:选举端口
server.1=192.168.89.129:2887:3887
server.2=192.168.89.129:2888:3888
server.3=192.168.89.129:2889:3889

复制改zoo2.cfg,zoo3.cfg

cd ../bin/
sh zkServer.sh start zoo1.cfg
sh zkServer.sh start zoo2.cfg
sh zkServer.sh start zoo3.cfg
查看状态
sh zkServer.sh status zoo3.cfg
主机leader，从机follower

停止
sh zkServer.sh stop zoo1.cfg
查看错误日志
cat zookeeper.out
------------
zookeeper宕机时，现有服务器仍能工作，因为列表在消费者内存中

zookeeper，树形结构保存信息
------------
参考自https://blog.csdn.net/java_66666/article/details/81015302

分布式服务框架
Hadoop 的一个子项目
处理数据管理问题
分布式应用配置项管理、统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。

一、zookeeper概要
zookeeper = 文件系统 + 监听通知机制

（一）、Zookeeper维护一个类似文件系统的数据结构:

/NameService
    /Server1
    /Server2

/configuration

/GroupMembers
    /Member1
    /Member2
    
/Apps
    /App1
    /App2
    /App3
        /SubApp1
        /SubApp2

/NameService被称为znode（目录节点），znode可以存储数据，znode有四种类型：
1.PERSISTENT，持久化目录节点
客户端与zookeeper断开连接后，该节点依旧存在
2.PERSISTENT_SEQUENTIAL，持久化顺序编号目录节点
客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号
3.EPHEMERAL，临时目录节点
客户端与zookeeper断开连接后，该节点被删除
4.EPHEMERAL_SEQUENTIAL，临时顺序编号目录节点
客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号

（二）、监听通知机制
客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。

二、zookeeper作用
分布式应用配置项管理、
统一命名服务、
状态同步服务、
集群管理、
分布式应用配置项的管理等。

（一）、分布式应用配置项的管理
需求：程序是分布式部署在多台机器上，需要改变程序的配置文件，
需要逐台机器去修改，比较麻烦，
现在把这些配置全部放到zookeeper上去，保存在zookeeper的某个目录节点中，
然后所有相关应用程序对这个目录节点进行监听，一旦配置信息发生变化，每个应用程序就会收到 zookeeper 的通知，然后从 zookeeper 获取新的配置信息应用到系统中。

zookeeper service:
/Configuration(Config Data) <---watch---- [client,client,client]

实例：
Zookeeper单机模式安装：
1.java
2.下载并解压zookeeper-3.4.12.tar.gz
3.到配置目录 cd zookeeper/conf/
4.复制配置文件cp zoo_sample.cfg zoo.cfg
5.启动zookeeper
bin/zkServer.sh start
6.检测是否成功启动，用zookeeper客户端连接下服务端
bin/zkCli.sh
7.zookeeper客户端操作

查看zookeeper中包含的znode（目录节点）
ls / => [zookeeper]

创建一个新的目录节点 zkPro
create /zkPro myData（值）

再次查看zookeeper中包含的znode（目录节点）
ls / => [zookeeper, zkPro]

获取znode中的内容
get /zkPro => myData

修改znode中的内容
set /zkPro myNewData

删除znode
delete /zkPro

8.使用Java API操作zookeeper
8.1 pom添加org.apache.zookeeper.zookeeper:3:4:12
8.2 进入bin/zkCli.sh，增加一个目录节点，并且把配置信息存储在里面
create /username qxn
8.3 启动java程序
/**
 * 分布式配置中心demo
 */
public class ZookeeperApplicationTests implements Watcher {

	/*
	 * countDownLatch 这个类使一个线程等待其他线程各自执行完毕后再执行，
	 * 通过计数器实现，计数器的初始值是线程的数量。
	 * 每当一个线程执行完毕后，计数器的值就-1，
	 * 当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。
	 */
	private static CountDownLatch connectedSemaphore = new CountDownLatch(1);
	private static ZooKeeper zk = null;
	// ZooKeeper命名空间中的每个znode都有一个与之关联的stat结构
	private static Stat stat = new Stat();

	public static void main(String[] args) throws Exception {
		// zookeeper配置数据存放路径
		String path = "/username";
		// 连接zookeeper并且注册一个默认的监听器
		zk = new ZooKeeper("192.168.137.131:2181", 5000, //
				new ZookeeperApplicationTests());
		/* 等待zk连接成功的通知，
		调用CountDownLatch.await()方法，将线程挂起，它会等待直到count值为0才继续执行 */
		connectedSemaphore.await();
		// 连接上zookeeper后，获取path目录节点的配置数据，并注册默认的监听器
		System.out.println(new String(zk.getData(path, true, stat)));
		// 使当前线程休眠，进入阻塞状态（暂停执行）
		Thread.sleep(Integer.MAX_VALUE);
	}

	public void process(WatchedEvent event) {
		// 当前event.getState()为zk连接成功通知事件时
		if (KeeperState.SyncConnected == event.getState()) {
			// EventType.None没有事件变化
			if (EventType.None == event.getType() && null == event.getPath()) {
				// 调用CountDownLatch.countDown()，将count值减1
				connectedSemaphore.countDown();
			} else if (event.getType() == EventType.NodeDataChanged) {  // zk目录节点数据变化通知事件
				try {
					System.out.println("配置已修改，新值为：" + new String(zk.getData(event.getPath(), true, stat)));
				} catch (Exception e) {
				}
			}
		}
	}
}
8.4 程序启动后正确的读取到了zookeeper的/username目录节点下的数据"qxn"
8.5 在zookeeper里修改下目录节点/username下的数据
set /username qxn1
修改完成后，在java程序后台及时收到了他们监听的目录节点数据变更后的值
"qxn1"