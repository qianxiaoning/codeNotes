---------------
rabbitmq

常用订单：流量削峰

redis,rabbitmq是项目中必须要用的

降低耦合都可以通过中间加一个东西来解决，经典的生产者消费者模型

1.服务解耦
2.订单、流量削峰
3.异步调用

六种模式：
1.简单模式
2.工作队列模式（多个消费者，负载均衡，轮询。合理分发-手动确认qos(1)，数据的持久化-队列持久化，消息持久化）
3.发布订阅模式（fanout交换机）
4.路由模式（direct交换机，路由键和绑定建匹配）
5.主题模式（更复杂的路由模式，topic交换机，键的形式aaa.bbb.ccc,*.*.ccc,aa.#）*匹配一个单词，#匹配多个单词
6.rpc异步调用（两个队列，一个关联键）
多个客户端公用一个发送队列，
多个客户端有自己的返回队列

消息携带两个数据：返回队列名，每次消息的关联id

订单存储的解耦：
流量削峰，先把订单放到rabbitmq队列中
并同步到redis缓存中，方便用户查询

rabbitmq之前是：
1.客户端controller-service-dao入数据库

rabbitmq之后是：
1.客户端(订单生产者)
通过amqpTemplate.convertAndSend("orderQueue", pdOrder);
controller-orderId放入rabbitmq队列

2.新建消费者项目(订单消费者)
通过@RabbitListener(queues="orderQueue")
从队列取出订单
再调serive存入数据库

3.yml改成手动确认
acknowledge-mode: manual
OrderConsumer save中
channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);
---------------
RocketMQ
参考https://blog.csdn.net/autfish/article/details/89226461 系列

基础：
1.下载安装包安装
2.设置环境变量，ROCKETMQ_HOME
3.启动NameServer和Broker
4.创建topic
5.引入pom.xml依赖

6.生产者
创建ProducerService

private DefaultMQProducer producer = null;
@PostConstruct
public void initMQProducer() {
    producer = new DefaultMQProducer("defaultGroup");
    producer.setNamesrvAddr("localhost:9876");
    producer.setRetryTimesWhenSendFailed(3);

    try {
        producer.start();
    } catch (MQClientException e) {
        e.printStackTrace();
    }
}

public boolean send(String topic, String tags, String content) {
    Message msg = new Message(topic, tags, "", content.getBytes());
    try {
        producer.send(msg);
        return true;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}

7.启动Producer
boolean result = producerService.send("demo", "TAG-A", "Hello RocketMQ");
assertTrue(result);

8.消费者
创建ConsumerService

private DefaultMQPushConsumer consumer = null;
@PostConstruct
public void initMQConsumer() {
    consumer = new DefaultMQPushConsumer("defaultGroup");
    consumer.setNamesrvAddr("localhost:9876");
    try {
        consumer.subscribe("demo", "*");
        consumer.registerMessageListener(new MessageListenerConcurrently() {

            @Override
            public ConsumeConcurrentlyStatus consumeMessage(
                    List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
                for (MessageExt msg : msgs) {
                    System.out.println("Message Received: " + new String(msg.getBody()));

                }
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            }
        });
        consumer.start();
    } catch (MQClientException e) {
        e.printStackTrace();
    }
}

@PreDestroy
public void shutDownConsumer() {
    if (consumer != null) {
        consumer.shutdown();
    }
}

9.启动项目
输出

进阶：
RocketMQ概念：Producer, Consumer, Broker, Topic, Message Queue
NameServer，负责Producer、Consumer和Broker之间的协调

Producer饲养员

Broker管道: [
    {
        Topic: 水果,
        Queue: [
            {
                Queue1: [苹果,香蕉],
                Queue2: [香蕉],
                Queue3: [香蕉,苹果],
                Queue4: [香蕉]
            }
        ]
    },
    {
        Topic: 肉食,
        Queue: [
            {
                Queue1: [香肠],
                Queue2: [鱼肉],
                Queue3: [],
                Queue4: []
            }
        ]
    }
]

Consumer:[
    {
        name: 猴子,
        Topic: 水果,
        Tags: 香蕉
    },
    {
        name: 狗,
        Topic: 肉食,
        Tags: 香肠
    }
]
---------------
Kafka

有两种主要的消息传递模式：
1.点对点传递模式
多个生产者 -> 队列queue -> 多个消费者
一条消息只能被消费一次，消费后从队列中删除，能保证消息处理顺序

2.发布-订阅模式
多个生产者（发布者） -> topic -> 多个消费者（订阅者）
消息被持久化到topic中，消费者可以订阅一个或多个topic，同一条数据可以被多个topic消费，数据被消费后不会马上删除

Kafka是发布订阅模式
优点：
1.解耦
将消息系统独立出来
2.消息持久化
防止处理失败，数据丢失，采用"插入-获取-删除"范式
3.扩展性
增大消息入队和处理的频率，只需另外增加处理过程
4.灵活性&峰值处理能力
5.可恢复性
消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。
6.顺序保证
Kafka保证一个Partition内的消息的有序性。
7.缓冲
8.异步通信
用户不想也不需要立即处理消息，可以向队列中放入消息，然后在需要的时候再去处理它们。
---------------
mq常用场景：
1.流量消峰
2.应用解耦
3.异步处理
a调用b，b需要很长时间，a不想阻塞，a需要知道b什么时候完成
mq之前：
一、a轮询调用b，查询是否完成
二、a提供一个callback api，b完成后调这个callback
使用mq后：
a调用b，b调用完往mq发消息，a会监听mq从而得到消息，完成异步处理

常用mq：
ActiveMQ
优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较
低的概率丢失数据
缺点:官方社区现在对 ActiveMQ 5.x 维护越来越少，高吞吐量场景较少使用。

Kafka
优点：大数据量消息中间件，TPS百万级，在数据采集、传输、存储的过程中发挥着举足轻重的作用。
kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用，消费者采
用 Pull 方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次，有优秀的第三方Kafka
Web 管理界面 Kafka-Manager；在日志领域比较成熟，功能
较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用
缺点：Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，社区更新较慢；

RocketMQ
优点:单机吞吐量十万级,可用性非常高，分布式架构,消息可以做到 0 丢失,MQ 功能较为完善，还是分布式的，扩展性好,支持 10 亿级别的消息堆积，不会因为堆积导致性能下降,源码是 java 我们可以自己阅读源码，定制自己公司的 MQ
缺点：支持的客户端语言不多，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在MQ
核心中去实现 JMS 等接口,有些系统要迁移需要修改大量代码

RabbitMQ
优点:吞吐量到万级，MQ 功能比较完备,健壮、稳定、易用、跨平台、支持多种语言 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用,社区活跃度高；更新频率相当高
缺点：商业版需要收费,学习成本较高
---------------
mq的选择
1.日志采集首选kafka
2.金融互联网,可靠性要求很高,业务削峰， RocketMQ
3.时效性微秒级，社区活跃度也比较高,数据量没有那么大,中小型公司优先选择功能比较完备的 RabbitMQ
---------------
rabbitmq
生产者
交换机:一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息
队列
消费者

rabbitmq安装：
rpm -ivh erlang-21.3-1.el7.x86_64.rpm
yum install socat -y
rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm
开机启动
chkconfig rabbitmq-server on
开/关/状态
systemctl start/stop/status rabbitmq-server

开启web端管理插件
rabbitmq-plugins enable rabbitmq_management
访问ip:15672

guest账号无法登录

创建用户和权限
账号、密码
rabbitmqctl add_user admin 123
设置角色
rabbitmqctl set_user_tags admin administrator
设置权限
格式：set_permissions [-p <vhostpath>] <user> <conf> <write> <read>
用户 user_admin 具有/vhost1 这个 virtual host 中所有资源的配置、写、读权限
rabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"

列出当前用户
rabbitmqctl list_users

关闭应用的命令为
rabbitmqctl stop_app
清除的命令为
rabbitmqctl reset
重新启动命令为
rabbitmqctl start_app