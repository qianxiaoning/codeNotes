---------------
rabbitmq

常用订单：流量削峰

redis,rabbitmq是项目中必须要用的

降低耦合都可以通过中间加一个东西来解决，经典的生产者消费者模型

1.服务解耦
2.订单、流量削峰
3.异步调用

六种模式：
1.简单模式
2.工作队列模式（多个消费者，负载均衡，轮询。合理分发-手动确认qos(1)，数据的持久化-队列持久化，消息持久化）
3.发布订阅模式（fanout交换机）
4.路由模式（direct交换机，路由键和绑定建匹配）
5.主题模式（更复杂的路由模式，topic交换机，键的形式aaa.bbb.ccc,*.*.ccc,aa.#）*匹配一个单词，#匹配多个单词
6.rpc异步调用（两个队列，一个关联键）
多个客户端公用一个发送队列，
多个客户端有自己的返回队列

消息携带两个数据：返回队列名，每次消息的关联id

订单存储的解耦：
流量削峰，先把订单放到rabbitmq队列中
并同步到redis缓存中，方便用户查询

rabbitmq之前是：
1.客户端controller-service-dao入数据库

rabbitmq之后是：
1.客户端(订单生产者)
通过amqpTemplate.convertAndSend("orderQueue", pdOrder);
controller-orderId放入rabbitmq队列

2.新建消费者项目(订单消费者)
通过@RabbitListener(queues="orderQueue")
从队列取出订单
再调serive存入数据库

3.yml改成手动确认
acknowledge-mode: manual
OrderConsumer save中
channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);
---------------
RocketMQ
参考https://blog.csdn.net/autfish/article/details/89226461 系列

基础：
1.下载安装包安装
2.设置环境变量，ROCKETMQ_HOME
3.启动NameServer和Broker
4.创建topic
5.引入pom.xml依赖

6.生产者
创建ProducerService

private DefaultMQProducer producer = null;
@PostConstruct
public void initMQProducer() {
    producer = new DefaultMQProducer("defaultGroup");
    producer.setNamesrvAddr("localhost:9876");
    producer.setRetryTimesWhenSendFailed(3);

    try {
        producer.start();
    } catch (MQClientException e) {
        e.printStackTrace();
    }
}

public boolean send(String topic, String tags, String content) {
    Message msg = new Message(topic, tags, "", content.getBytes());
    try {
        producer.send(msg);
        return true;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}

7.启动Producer
boolean result = producerService.send("demo", "TAG-A", "Hello RocketMQ");
assertTrue(result);

8.消费者
创建ConsumerService

private DefaultMQPushConsumer consumer = null;
@PostConstruct
public void initMQConsumer() {
    consumer = new DefaultMQPushConsumer("defaultGroup");
    consumer.setNamesrvAddr("localhost:9876");
    try {
        consumer.subscribe("demo", "*");
        consumer.registerMessageListener(new MessageListenerConcurrently() {

            @Override
            public ConsumeConcurrentlyStatus consumeMessage(
                    List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
                for (MessageExt msg : msgs) {
                    System.out.println("Message Received: " + new String(msg.getBody()));

                }
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            }
        });
        consumer.start();
    } catch (MQClientException e) {
        e.printStackTrace();
    }
}

@PreDestroy
public void shutDownConsumer() {
    if (consumer != null) {
        consumer.shutdown();
    }
}

9.启动项目
输出

进阶：
RocketMQ概念：Producer, Consumer, Broker, Topic, Message Queue
NameServer，负责Producer、Consumer和Broker之间的协调

Producer饲养员

Broker管道: [
    {
        Topic: 水果,
        Queue: [
            {
                Queue1: [苹果,香蕉],
                Queue2: [香蕉],
                Queue3: [香蕉,苹果],
                Queue4: [香蕉]
            }
        ]
    },
    {
        Topic: 肉食,
        Queue: [
            {
                Queue1: [香肠],
                Queue2: [鱼肉],
                Queue3: [],
                Queue4: []
            }
        ]
    }
]

Consumer:[
    {
        name: 猴子,
        Topic: 水果,
        Tags: 香蕉
    },
    {
        name: 狗,
        Topic: 肉食,
        Tags: 香肠
    }
]
