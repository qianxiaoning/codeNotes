docker
轻量的虚拟机

vmware需要虚拟硬件，操作系统

docker不虚拟硬件，系统资源直接使用宿主资源

docker虚拟机称为容器

docker开发运维一体化（DevOps）核心工具

docker镜像：静态文件
docker容器：从镜像实例化出来的

镜像仓库：https://hub.docker.com/

下载镜像
docker pull xxx:yyy
yyy:标签版本号

docker中存在的镜像
docker images
docker image ls

运行进入镜像
docker run hello-world
后台运行，不进镜像
docker run -d xxx
-d后台
-i交互
-t终端

查看容器列表
docker ps
查看全部容器
docker ps -a
列出最近创建的容器
docker ps -l

删除本地镜像
docker rmi xxx

退出镜像
exit

删除镜像
docker image rm 镜像名:tag/id
有容器删不了则
docker image rm -f 镜像名:tag/id

镜像导出导入
容器构建新镜像（可选）
docker commit containerName imageName:tag（不会保留挂载卷内容）
导出
docker save -o xxx.tar imageName
导入xxx到docker
docker load -i xxx.tar
docker load < xxx

容器导出导入
导出
docker ps --no-trunc，记住command命令
docker export -o name.tar containerName
或
docker export 容器的ID > 压缩包名字.tar
导入
docker import name.tar containerName:TAG
docker run ... containerName:TAG command命令（没试成功？）

进入容器
docker exec -it 77a bash

启动容器
docker start 77a

停止容器
docker stop 77a

查看docker状态
systemctl status docker

删除容器
docker container rm 77a 88a
删除正在运行的容器
docker container rm -f 77a

\折行写命令

清理所有终止状态容器
docker container prune

容器的数据管理：
数据存到宿主机磁盘上
宿主机（linux服务器）路径/usr/app
容器路径/opt/app

启动挂载数据卷的容器
--name 给容器起名
-v指定挂载的目录（冒号前是宿主机路径，后是容器路径）
docker run -dit --name centos7 -v /usr/app:/opt/app centos:7

修改容器内jar包方法之一:
容器内的jar包可以通过挂载到宿主机，然后停止容器，再修改宿主机jar包实现修改

创建文件，EOF结束符，向f1输出
cat <<EOF > f1
查看文件
cat f1

数据卷：
docker在宿主机上创建，不用关心路径
docker volume create my-vol
查看所有数据卷
docker volume ls
查看指定 数据卷 的信息（挂载目录）
docker volume inspect my-vol
启动挂载数据卷的容器
docker run -dit --name centos7-v2 -v my-vol:/opt/app centos:7
删除数据卷（如果数据卷被容器使用则无法删除）
docker volume rm my-vol
清理无主数据卷
docker volume prune

-v挂载卷（宿主机根目录:容器根目录，不写根目录找不到）
挂载目录
-v /aaa/aaa/:/bbb/bbb/
挂载文件
-v /aaa/aaa/a.conf:/bbb/bbb/b.conf

端口映射
宿主机80->容器端口8080
docker run -dit --name tomcat -p 80:8080 tomcat

浏览器访问80端口

容器互联:
新建网络
docker network create -d bridge my-net
启动两个容器连接到网络
docker run -dit --name centos7-1 --network my-net centos:7
docker run -dit --name centos7-2 --network my-net centos:7
进入一个容器ping另一个容器
宿主机也能连接

自己制作镜像
镜像中每一个操作会加一层，层数越少越好
mkdir dockerfile
mv jdk-8u212-linux-x64.tar.gz dockerfile/
mv apache-tomcat-8.5.42.tar.gz dockerfile/
cd dockerfile

cat <<EOF > Dockerfile
#以centos7为基础
FROM centos:7
#ADD命令将压缩包传入镜像中的指定目录,并同时解压缩
ADD jdk-8u212-linux-x64.tar.gz /opt/
ADD apache-tomcat-8.5.42.tar.gz /usr/
#为了方便,把文件夹名称改得简单一点
RUN mv /usr/apache-tomcat-8.5.42 /usr/tomcat
#设置环境变量
ENV JAVA_HOME=/opt/jdk1.8.0_212 \
    CATALINA_HOME=/usr/tomcat \
    PATH=$PATH:/opt/jdk1.8.0_212/bin:/usr/tomcat/bin
#暴露容器的8080端口
EXPOSE 8080
#设置启动容器时自动运行tomcat
ENTRYPOINT /usr/tomcat/bin/startup.sh && tail -F /usr/tomcat/logs/catalina.out
EOF

构建镜像
docker build -t tomcat:7 .

Docker案例：
1.加载redis镜像
2.启动容器
3.进入容器并启动redis工具
cd ~
docker exec -it redis7000 redis-cli

启动多个 redis 容器

容器互联
1.创建docker虚拟网络
2.mysql
创建数据卷
3.tomcat
启动 tomcat 容器
------------------
由镜像创建容器
docker create

启动容器
docker start

镜像创建容器，并启动
docker run
------------------
根据容器名查询容器
docker ps -a --filter name=qxn
docker ps -a -f name=qxn

根据镜像全称查询容器
docker ps -a --filter ancestor=mysql
------------------
阻塞容器
docker pause/unpause 容器
------------------
一个service只运行一个image
service规定了镜像运行的一些规则，例如应该开放哪个端口，需要把容器复制多少份以增加服务处理能力等等

swarm
多个运行docker的主机聚集在一起形成一个集群，使用Swarm操作集群，会使用户感觉就像是在一台主机上进行操作
------------------
docker开启健康检查
法1：
Dockerfile
HEALTHCHECK --interval=600s --timeout=5s  --retries=12 CMD du -sh /mysqlHealthFile || exit 1

法2：
docker run --name qxnmysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d --health-cmd="du -sh /mysqlHealthFile || exit 1" --health-interval=600s --health-retries=12 --health-timeout=5s mysql:latest

docker ps后STATUS会有括号
STATUS
Up 16 minutes (starting/healthy/unhealthy)
------------------
查看容器日志
docker logs -f aaa1213w
------------------
容器重命名
docker rename zk_old zk_new
------------------
安装docker-compose
1.https://github.com/docker/compose/releases/
选择对应版本，Assets下，比如：linux输入版本命令看最后X86_64
2.传入linux用户路径下，比如/usr/local/bin/下
3.授权，chmod u+x docker-compose
4.看版本号：docker-compose -version
------------------
操作所有容器
docker stop $(docker ps -a | awk '{ print $1}' | tail -n +2)
------------------
容器访问不了宿主机ip
法一：
创建容器的时候，指定网络模式， --net host，主机模式，容器和宿主机在同一网络下，就能ping通了
------------------
当docker默认网络模式bridge，访问不了容器内服务时，进到容器内确定服务没问题，可以把容器网络模式设为host，使容器内网络和宿主机在同一网络下，这样往往可以连接到容器内服务
------------------
容器和宿主机文件互相复制
docker cp /a/client.conf tracker:/b
docker cp tracker:/b/client.conf /a/
------------------
容器启动报权限错误
ls: cannot access '/docker-entrypoint-initdb.d/': Operation not permitted
在docker-compose.yml容器上加上，privileged: true，赋root权限解决
------------------
查看镜像/容器详细信息
docker inspect apachegriffin/griffin_spark2:0.3.0 （带上版本号）
docker inspect griffin
------------------
docker-compose命令
拉取镜像
docker-compose pull
指定配置文件，默认docker-compose文件名docker-compose.yml
docker-compose -f docker-compose-non-dev.yml pull
启动
docker-compose up -d
查看docker-compose管理的容器
docker-compose ps
开启、重启、停止
docker-compose start
docker-compose restart
docker-compose stop
关闭并删除容器
docker-compose down
查看版本
docker-compose version
------------------
修改容器端口
停止容器
停止docker
vim /var/lib/docker/containers/容器ID/hostconfig.json
修改
3306/tcp:是容器端口, HostPort":"3306:是宿主机端口
------------------
关闭容器自动启动
docker update --restart=no 容器ID
------------------
docker开机自启
systemctl enable docker
docker关闭开机自启
systemctl disable docker
------------------