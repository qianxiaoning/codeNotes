----------
25.准备linux环境
25.1.安装VMware，导入linux文件-dsCentOS.vmx
25.2.选中dsCentOS-empty，开启此虚拟机，我已复制该虚拟机
25.3.linux终端ifconfig，eth2: inet addr:192.168.89.128，正常显示ip，完成
选中dsCentOS-empty，开启此虚拟机，我已复制该虚拟机
25.4.选中系统，电源-关机
修改内存：1G
网络适配器-网络连接（解释）
桥接模式：虚拟机直接连入当前局域网，分配独立ip，局域网中ip都可访问此虚拟机
NAT模式：在本机中开辟一块私有网络空间，给开启的虚拟机分配ip，192.168.xxx.xxx
本机通过VMnet8和虚拟机通信，局域网其它机器不能连入虚拟机，更安全
25.5.克隆系统文件
选中系统，管理-克隆-虚拟机当前状态-创建链接克隆（保留公共部分，只提取修改部分）-选择路径、修改文件名-开启此虚拟机

ifconfig查看linux ip：
windows机器VMnet8网卡，ip地址192.168.89.1
虚拟机ip，192.168.89.129
同一网段连接

25.6.配置虚拟机的静态ip，防止ip改变
VMware-两台电脑-VPN Connections-Configure VPN-Auto eth3-edit-IPv4 Settings-Method:Manual
-add Address:
Address/Netmask子虚掩码（校验）/Gateway网关（出口）
192.168.89.129/255.255.255.0/192.168.89.2
DNS servers 192.168.89.2

26.XShell远程连接工具
26.1.连接虚拟机，名字、ip、账号、密码
26.2.文件-打开，多建立几个连接
27.项目部署到linux服务器，nginx集群ip地址修改
27.1.安装lrzsz插件，拖拽文件上传
27.2.cd /usr/local/src/
27.3.将jdk1.8安装包传入
解压tar -xvf jdk-8u51-linux-x64.tar.gz
删除压缩包，rm -f jdk-8u51-linux-x64.tar.gz
改名mv jdk1.8.0_51/ jdk1.8
配置环境变量，vim /etc/profile
#set java env下
JAVA_HOME=/usr/local/src/jdk1.8
JAVA_BIN=/usr/local/src/jdk1.8/bin
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export JAVA_HOME JAVA_BIN PATH CLASSPATH
27.4.环境变量生效
source /etc/profile
查看是否安装成功 java -version
27.5.搭建linux集群
linux连接windows数据库，将项目application.yml中的ip地址改为VMnet8网卡ip
url: jdbc:mysql://192.168.89.1:3306/...
将端口改为8061,8062,8063
然后项目打包命名为8061.war,8062.war,8063.war

远程访问权限配置
windows浏览器=>linux tomcat=>windows Mysql，两道操作系统防火墙，Mysql数据库权限
windows防火墙，选择性关闭
Mysql数据库权限：
grant [权限] on [数据库名].[表名] to ['用户名']@['web服务器的ip地址'] identified by ['密码'];
在SQLyog中
grant all on *.* to 'root'@'%' identified by 'root';
关闭linux防火墙
永久关闭防火墙，下次生效 chkconfig iptables off/on
临时关闭linux防火墙，立即生效 service iptables stop/start

在src/下
mkdir tomcats
cd tomcats/
将8061.war传入
java -jar 8061.war运行
java -jar 8061.war & 运行后可继续输入指令
浏览器http://192.168.89.129:8061/port访问测试
8062,8063同样传入，运行

nginx.conf中新增linux集群
upstream c2cSystemLinux 虚拟机ip 192.168.89.129，启用c2cSystemLinux，重启nginx

正常访问http://manage.c2c-system.com/，文件上传接口用不了

28.关闭java -jar 8061.war & 开启的进程
28.1.查询进程
ps -ef |grep 8061.war
ps -ef |grep java*
28.2.结束进程
kill 3183 被使用时，可能不成功
kill -15 3183 正常步骤关闭
kill -9 3183 强制结束
29.9.8.拍摄快照
VMware(时钟+)，拍摄快照
快照完成，点击快照管理，选中快照，转到
----------
虚拟机开了很多服务的时候，挂起恢复会很慢，不如关机后，开启再启动服务快

虚拟机给别的电脑连接
1.将虚拟机的网络适配器改为桥接模式
2.将虚拟机网卡改为手动设置ip，网关和ip地址改为另一台连接电脑的网段
3.重启网络服务即可

让别人访问虚拟机上的端口
1.编辑-虚拟网络编辑器-NAT设置-添加端口转发
主机端口21000
类型TCP
虚拟机ip地址192.168.137.102
虚拟机端口21000
描述atlas
2.这样本机ip:21000就能访问虚拟机的21000端口了，和本机同一网段的机器可以通过访问本机ip，来访问该虚拟机端口
----------
PowerDesigner
1.设计大型数据库，我们应该遵循：先画ER 模型（概念设计）-物理设计。因为概念模型更容易看出实体间的联系，便于理清思路。如果直接设计物理模型，一堆外键，关系会很乱，搞不清之间的联系。

首先新建模型--选择概念模型（CDM）
新建实体（学生和卡），设置相应的属性
一共四种关系（1：1，1：n，n:1，n:n），根据自己需要建立关系
建立好各个实体之间的关系之后，我们就可以转换成物理模型了：工具-generatePDM
设置数据库：在设计面板空白处，右键-属性（properties）
生成数据库，设置好路径（Directory）-文件名（F）
打开导出的数据库，打开SQL（文件名），执行一下，数据库创建成功了。

2.对于只需设计几个表的数据库，我们可以偷偷懒，但是首先我们要明白之间的关系，然后我们直接建立物理模型进行设计

选择物理模型（PDM）
建表
设置属性
设置好各个表后，进行表关联（实体有多对多关系，表也可以设置的）
生成数据库以及执行制作好的(文件名-)SQL就可以看到新建立的数据库了。

sql转模型
file-reverse engineer-database-选择sql文件-选择需要的表-自动生成模型图
-----------------
windows cmd执行mstsc，微软远程桌面控制
---------------
gradle安装配置
1.下载gradle
2.配置环境变量
k:GRADLE_HOME
v:gradle安装目录

k:GRADLE_USER_HOME
v:gradle仓库目录

k:PATH
v:添加%GRADLE_HOME%\bin;

在Gradle安装目录下的 init.d 文件夹下，新建一个 init.gradle 文件
allprojects {
    repositories {
        maven { url 'file:///C:/Java/maven_repository'}
        mavenLocal()
        maven { name "Alibaba" ; url "https://maven.aliyun.com/repository/public" }
        maven { name "Bstek" ; url "http://nexus.bsdn.org/content/groups/public/" }
        mavenCentral()
    }

    buildscript { 
        repositories { 
            maven { name "Alibaba" ; url 'https://maven.aliyun.com/repository/public' }
            maven { name "Bstek" ; url 'http://nexus.bsdn.org/content/groups/public/' }
            maven { name "M2" ; url 'https://plugins.gradle.org/m2/' }
        }
    }
}

3.idea-settings-gradle
Gradle user home里配置gradle仓库地址
下面指定gradle本机安装路径
---------------
官方推荐使用 Hadoop-2.7.2、Hive-1.2.1、Spark-2.4.3 和 Scala-2.11.12 对 Linkis 进行编译
说明Linkis需要在linux编译，windows没有这些环境
cd incubator-linkis-x.x.x
mvn -N  install

cd也说明是在linux环境操作的
---------------
谷歌浏览器-网络里没法打断点
得去-源代码-ctrl o搜索文件，打断点
---------------
postman请求下载文件接口，选send下面那个send and download
---------------
检测后端jar包是否有漏洞
国家信息安全漏洞库-漏洞信息-右侧漏洞名称中搜索jar包关键字，选择危害等级
左侧选择漏洞，最下面官方补丁
比如：https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-r38f-c4h4-hqq2
Security中
Affected versions受漏洞影响版本
Patched versions补丁版本
---------------
写代码逻辑先定义好大结构方法
在写后端某个方法的具体逻辑实现层的时候，先大概确定有哪几步，
比如数据转换逻辑：
1.读取数据 2.数据处理 3.写入数据。
然后写好这三个方法名，再在每个方法里写具体逻辑。

既在写逻辑的时候，先定义大结构，再在结构里再去扩充，别直接从第一行往下写，这样代码就没有清晰的大结构了。
---------------
多个if else判断的时候，比如输入有10种数据源，输出有10种数据源，每种配对要有1.读取数据 2.数据处理 3.写入数据这三步处理，
判断最少的写法是，将数量最小的写在外面，既处理步骤在外面
1.读取数据 10种数据源
2.数据处理 10种数据源，如果不需要这步不处理就行
3.写入数据 10种数据源
10+10+10=30种

如果if else在外面，就得写100种
10*10=100，里面写1.读取数据 2.数据处理 3.写入数据
---------------
接口定义规范
类的继承
子类，HiveReader
public class HiveReader extends BaseReaderPlugin implements ShonReaderInterface
父类，基础Reader插件
public abstract class BaseReaderPlugin extends BaseShonPlugin
爷爷类，基础项目名Reader插件
public abstract class BaseShonPlugin implements ShonPluginInterface
public interface ShonPluginInterface

行为的扩展，接口的实现
继承项目名Reader接口
public class HiveReader extends BaseReaderPlugin implements ShonReaderInterface
子接口继承项目名插件接口
public interface ShonReaderInterface extends ShonPluginInterface
父接口项目名插件接口
public interface ShonPluginInterface
---------------
MIME类型
任意的二进制数据 application/octet-stream
普通文本 .txt text/plain;charset=utf-8
PDF文档 .pdf application/pdf
Microsoft Word文件 .word application/msword
PNG图像 .png image/png
excel application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8
---------------
原子性
单一线程持有
---------------
代码加锁同步机制底层原理
可能：
1.多个线程竞争拿锁，拿锁之前，先将请求入的线程放入线程安全的数据结构保存，哪怕同一时刻进来多个线程，也会都给他们保存好，然后从安全的数据结构中一个个拿出线程去执行拿锁代码（举个可能不恰当的例子，相当于多个线程同时放入队列，然后队列一个个拿出来消费）
2.拿锁方式：
单点式：
在需要同步执行的代码前竞争锁，从线程安全的数据结构中串行取出线程，这一块代码的所属线程只能有一个，未拿到所操纵代码指针的线程阻塞

分布式：
在需要同步执行的代码前加锁，redis：通过SETNX方法，判断key是否存在。zookeeper：创建目录，判断目录是否存在。redis和zookeeper方法里是原子性的，并发存入，串行取出执行，所以不会有两个线程同时拿到一个锁的并发问题。
---------------