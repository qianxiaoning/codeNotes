------------------
Mysql
数据库>数据表=>（表头：字段，表记录）

数据库：
sqlserver(基本淘汰，技术古老),
oracle（收费，维护费）,
mysql（免费，开源）,
db2（主要于银行）,

Nosql(非关系型数据库):
redis（内存数据库）,
mongodb（分布式文件数据库？）

mysql:
登录 mysql -uroot -p
登录 mysql -uroot -p密码
退出 exit,quit
注释 #sfdfd
注释 -- wwwewq
注释 /*wewewee*/
密码 root
对库操作：
创建jt_yh数据库：
create database jt_yh;
查看所有数据库：
show databases;
自带4个不能删，除test
删除数据库：
drop database jt_yh;

\c 退出当前操作

表操作：
创建表tb_door，:
选中数据库
use jt_yh;
建表：
primary key // 主键
auto_increment // 自增长
create table tb_door(id int primary key auto_increment,door_name varchar(200),tel varchar(100));
表中3个字段id,door_name,tel
查看所有表：
show tables;
查看表结构：
desc tb_door;
删除表：
drop table tb_door;
表记录操作：
向表中插入2条记录
insert into tb_door value(null,'yhdw1','666');
insert into tb_door value(null,'yhdw2','777');
查看 tb_door表中所有的记录
select * from tb_door; 
修改表中id为3的记录
update tb_door set tel='991',name='xxx' where id=3;
按某个顺序排序 默认升序
select * from tb_door order by tel;
降序
select * from tb_door order by tel desc;
查看表中所有的数据总数
select count(*) from tb_door;
删除某条指定的记录
delete from tb_door where id=3;
------------------
数据库软件：
Navicat for MySQL
------------------
用软件操作数据库：
navicat for Mysql
可视化数据库工具
双击库
右键新建数据库
右键删除数据库
选中库，新建表，主键按钮、自动递增勾选，向下箭头新增表记录，字符集utf8
设计表：查看表结构
右键删除记录
验证sql对否：
查询-新建查询select * from tb_door where id=2; 运行
三个timestamp只能有一个根据当前时间戳更新
timestamp, int, double默认值为null

navicat数据库的导入导出
导出：
1.连接库（绿了）
2.右键库，转储sql文件，显示successful点关闭
3.得到sql文件，导出完毕

导入：
1.右键连接，新建数据库，填入数据库名
2.连接库（绿了）
3.右键库，运行sql文件，显示successful点关闭，导入完成
------------------
数据库mysql
关系型数据库
用于存储，管理数据的仓库

数据库根据底层存储数据结构的不同可以分为很多种类：
早期的层次式（淘汰），网络型，现在流行的关系型（大部分）、非关系型

关系型数据库：
底层以二维表的形式，保存数据的数据库
eg：
表头
表记录
表记录

非关系型数据库：
底层是key-value结构

常见的关系型数据库：
SQL Server（微软，收费，适用于中大型项目）,
Oracle（甲骨文，占比50%，收费，大-超大型项目）,
Mysql（瑞典MysqlAB公司，小-中型项目，集群也能支持大型项目，占比20%）,
Mariadb（核心就是Mysql）
DB2（IBM公司，收费，经常在银行金融使用）,
Sqlite（迷你数据库，手机-移动设备-智能家居）

数据库服务器：
安装的数据库软件的服务器

数据库：
数据库服务器中有很多个数据库，一个网站所有数据会存放在一个数据库中

表（数据表）：
一个数据库中可以有多张表，一般情况下一类信息会存放在一张表中。比如用户相关的信息存在用户表中，商品信息在商品表。

表记录：
一张表中有多条表记录，一条表记录用以记录某一条具体的信息，对应java在的对象（实例）
java中通过类保存一类信息，因此，java一个类对应一张表

drop, delete, truncate区别
drop删除库和表，不能删除表记录
delete和truncate用于删除表记录，不能用于删除库和表本身
delete用于删除表记录，可以删除表中的某一部分记录，也可以删除表中的所有记录，而且删除时，是一条一条删除。
truncate也是用于删除表记录，只能删除所有记录，删除时不是一条一条删除，而且将整张表摧毁重建。

mysql中常见的函数：
ifnull(列名,值);// 对指定列的值判断是否为null，如果为null则用第二个参数对null值替换
count(列|*);// 对指定列或所有列统计行数
max(列名)/min(列名)
sum(列名)// 合计
avg(列名)// 平均
curdata()/curtime()/sysdate()/now()// 时间

...

面试方向？：
1.sql的优化
2.数据库的索引原理
3.数据库的事务
4.触发器，游标查询

查看已进入的库
select database();

存在的话删除
drop database if exists 库名;	

创建库并制定编码
create database 库名 charset utf8;

如果不存在则创建mydb1;
create database if not exists 库名 charset 编码;

查看建库时的语句（并验证数据库库使用的编码）
show create database 库名;

进入mydb1库，删除stu学生表(如果存在)
drop table if exists stu;

建表的语法
create table 表名(
	列名 数据类型,
	name varchar(50),  /*50个字符*/
	gender varchar(2),
	birthday date,
	score double,
	列名 数据类型,
	...
); 

字符串类型：
char(n)  n最大字符    定长字符串   tom后面空格补足   缺点：可能存在空间浪费  效率比varchar略高   n范围0~255字符
varchar(n)   不定长字符串      剩余空间留给别的数据使用，因此不会空间浪费    n范围  <mysql5.0:0~255字符   >mysql5.0:0~65535字节

大文本类型：
text  0~65535字节
bigtext    4GB范围空间   

日期类型：
date 格式：年月日
time 格式：时分秒
datetime 格式：年月日 时分秒
timestamp 时间戳1970-1-1到指定时间的毫秒值   可以设置为自动更新为当前时间，datetime不行

插入记录：
insert into 表名 (列1，列2，列3...) values(值1，值2，值3...);
或：
insert into 表名 values(值1，值2，值3...);
insert into 表名 values(值1，值2，值3...),(值1，值2，值3...);

取消当前语句执行
\c

cmd查询或插入数据的编码问题：
1.在查询或插入数据前先设置编码
set names gbk;
2.仍然有乱码，检查创建库时使用的编码是否为utf-8，如果不指定默认为latin1，latin1中是没有中文字符的
show create database 库名;
3.还有问题，改数据库服务器的编码  
在F:\software\mysql\data\my.ini    改代码
[mysqld]
character-set-server=utf8
[client]
default-character-set=gbk
mysql服务器重启   计算机-管理-服务和应用程序-服务-mysql-重启

mysql出问题	 
在data目录导入备份即可

主键约束，唯一且不为空
	id int primary key
--	自增 
	id int primary key auto_increment
	-- 之后也能自己设置id，就是不能重复
--	唯一约束，不能重复（可以为空）
	email varchar(50) unique
--	非空约束，可以重复（不能为空）
	gender varchar(2) not null

修改语法:
修改stu表中所有学生的成绩，加10分特长分
update stu set score=score+10;

update stu set score=88 where name='王海波';

删除记录语法: delete from 表名 [where条件] 
delete from stu;
仅删除符合条件的
delete from stu where id>4;
delete from stu where id>=5;
--	讲表摧毁再重建   id 1开始
truncate table stu;

distinct 用于剔除重复的记录
select distinct dept,job from emp;

查询emp表中薪资大于3000的所有员工，显示员工姓名、薪资
select name,sal from emp where sal>3000;

查询emp表中总薪资(薪资+奖金)大于3500的所有员工，显示员工姓名、总薪资
select name,sal+bonus from emp where sal+bonus>3500;
-- ifnull(列, 值)函数: 判断指定的列是否包含null值, 如果有null值, 用第二个值替换null值
select name,sal+ifnull(bonus,0) from emp where sal+ifnull(bonus,0)>3500;
-- 注意查看上面查询结果中的表头，如何将表头中的 sal+bonus 修改为 "总薪资"
select name as 姓名,sal+ifnull(bonus,0) as 总薪资 from emp where sal+ifnull(bonus,0)>3500;
where里面不能使用列的别名

20.查询emp表中薪资在3000和4500之间的员工，显示员工姓名和薪资
	select name,sal from emp where sal>=3000 and sal<=4500;
	-- 提示: between...and... 在...之间
	select name,sal from emp where sal between 3000 and 4500;	
-- 21.查询emp表中薪资为 1400、1600、1800的员工，显示员工姓名和薪资
	select name,sal from emp where sal=1400 or sal=1600 or sal=1800;
	select name,sal from emp where sal in(1400,1600,1800);不等于
	in(1400,1600,1800)可以理解为一个集合
-- 22.查询薪资不为1400、1600、1800的员工
	!=和<>都是不等于
	select name,sal from emp where sal<>1400 and sal!=1600 and sal!=1800;
	select name,sal from emp where not(sal=1400 or sal=1600 or sal=1800);
	select name,sal from emp where sal not in(1400,1600,1800);
-- 23.查询emp表中薪资大于4000和薪资小于2000的员工，显示员工姓名、薪资。
	select name,sal from emp where sal<2000 or sal>4000;
-- 24.查询emp表中薪资大于3000并且奖金小于600的员工，显示员工姓名、薪资、奖金。
	select name,sal,ifnull(bonus,0) as bonus from emp where sal>3000 and ifnull(bonus,0)<600;
	-- 处理null值

-- 25.查询没有部门的员工（即部门列为null值）
	select * from emp where dept=null;// dept和null不等，null和null也不等
	select * from emp where dept is null;
	-- 思考：如何查询有部门的员工（即部门列不为null值）	
	select * from emp where not(dept is null);
	select * from emp where dept is not null;
-- ******** Like模糊查询 ********
-- 26.查询emp表中姓名中以"刘"开头的员工，显示员工姓名。
	select name from emp where name like '刘%';

	/* like进行模糊查询，"%" 表示通配，表示0或多个字符。
	"_"表示一个任意的字符 */
	
-- 27.查询emp表中姓名中包含"涛"员工，显示员工姓名。
	select name from emp where name like '%涛%';

	如果"涛"是变量，得这么写
	select name from emp where name like concat("%",#{name},"%");

-- 28.查询emp表中姓名以"刘"开头并且姓名为2个字的员工，显示员工姓名。
	select name from emp where name like '刘_';	
	
-- --------------------------
-- 三、分组查询、聚合函数、排序查询
-- --------------------------
-- 29.对emp表按照部门对员工进行分组，查看分组后效果
	/* 分组的语法: 
	select 查询的列 from 表名 group by 列名
	根据指定的列进行分组 */
	select * from emp group by dept;
-- 30.对emp表按照职位进行分组, 并统计每个职位的人数, 显示职位和对应人数
	select * from emp group by job;	
--	职位和对应组统计
	select job,count(*) from emp group by job;
--	count(*);// count统计某一列，或所有列，返回10。分组之后，按组统计。
	select count(*) from emp;
	select count(name) from emp;
-- 31.对emp表按照部门进行分组, 求每个部门的最高薪资(不包含奖金)，显示部门名称和最高薪资
	max()  min()
	select dept,max(sal) as maxsal 	
	from emp
	group by dept;	
-- 32.统计emp表中薪资大于3000的员工个数（- count(column)统计某列的行数）	
	select count(*) from emp where sal>3000;
-- 33.统计emp表中所有员工的薪资总和(不包含奖金)（- sum(column)对某列的值求和）
	select sum(sal) from emp;
-- 34.统计emp表员工的平均薪资(不包含奖金)（- avg(column)对某列的值求平均值）
	select avg(sal) from emp;
-- 35.查询emp表中所有在1993和1995年之间出生的员工，显示姓名、出生日期。
	select name,birthday from emp where birthday between '1993-01-01' and '1995-12-31';
	select name,birthday from emp where year(birthday) between 1993 and 1995;

时间函数：
三个函数：
year(date)
month(date)
day(date)

curdate() 获取当前日期 年月日
curtime() 获取当前时间 时分秒
sysdate() 获取当前日期+时间 年月日 时分秒
now() 同上

查询本月过生日的所有员工
select * from emp where month(curdate())=month(birthday);	
select * from emp where month(curdate())+1=month(birthday);	
select * from emp where month(curdate())-1=month(birthday);	
select * from emp where month(now())=month(birthday);	
select * from emp where month(sysdate())=month(birthday);	
select curdate();// 当前时间
select curtime();
select sysdate();
select now();

-- --------------------------
-- **************** 排序查询 ***************
-- --------------------------
	/* order by 排序的列 asc 升序(从低到高)
	order by 排序的列 desc 降序(从高到低)
	默认就是升序，所以asc可以省略不写 */
-- 37.对emp表中所有员工的薪资进行升序(从低到高)排序，显示员工姓名、薪资。
	select name,sal from emp order by sal asc;
-- 38.对emp表中所有员工奖金进行降序(从高到低)排序，显示员工姓名、奖金。
	select name,ifnull(bonus,0) from emp order by ifnull(bonus,0) desc;
-- --------------------------
-- **************** 分页查询 ***************
-- --------------------------
	/* 在mysql中，通过limit进行分页查询：
	limit (页码-1)*每页显示记录数, 每页显示记录数 */
	/*limit start,size */
	/*limit 起始位置,每页记录数 */
-- 39.查询emp表中的所有记录，分页显示：每页显示3条记录，返回第 1 页。
	select * from emp limit 0,3;
-- 40.查询emp表中的所有记录，分页显示：每页显示3条记录，返回第 2 页。
	select * from emp limit 3,3;

两表建立关系
在一个表中添加另一张表的主键

设立外键
告诉数据库两表的对应关系，数据库会帮我们维护。
比如指定外键后，如果想删除一个部门，数据库会帮我们检查该部门下是否有员工，如果还有员工，数据库会阻止我们删除。
eg:
dept				emp
部门表                员工表
id					dept_id
建表时：
create table emp(
	id int primary key auto_increment,	-- 员工编号
	name varchar(20),					-- 员工姓名
	dept_id int,						-- 部门编号
	foreign key(dept_id) references dept(id) -- 指定外键
);

外键：
通知数据库两表数据对应关系的一个列

一对一
在任意一张表添加主键

一对多，多对一
通常会在多的一方添加主键

多对多
再创建一张表，至少有两列
eg:
学生表，教师表
stuid		teaid
一号学生对应哪些老师
一号老师对应哪些学生
二号学生对应哪些老师
二号老师对应哪些学生

关联查询、外连接查询：
查询部门和部门对应的员工信息
select * from dept,emp;// 笛卡尔积查询，同时查询两张表，一张表记录m条，另一张n条，笛卡尔积查询结果是m*n条。
// 可以从笛卡尔积查询中，通过where条件剔除错误记录，保留正确记录。
select * from dept,emp where dept.id=emp.dept_id;
// 内连接
select * from dept inner join emp on dept.id=emp.dept_id;
// 左外连接left join 把左表所有记录查出来，右边只查与左相对应的，没有相对应的会显示null
select * from dept left join emp on dept.id=emp.dept_id;
// 右外连接right join
select * from dept right join emp on dept.id=emp.dept_id;
-- 44.查询所有部门和部门下的员工，如果部门下没有员工，员工显示为null
select * from dept left join emp on dept.id=emp.dept_id;
-- 45.查询部门和所有员工，如果员工没有所属部门，部门显示为null
select * from dept right join emp on dept.id=emp.dept_id;

// 内连接，左外，右外连接 必须要有on连接
一般格式：
...from tableA left join tableB on tableA.a=tableA.b;

子查询、多表查询：
列出薪资比'王海波'薪资高的所有员工，显示姓名、薪资
-- 假设王海波薪资为x，列出薪资比x高的所有员工
select name,sal from emp where sal>x;
-- 合并两条sql，子查询
select name,sal from emp where sal>(select sal from emp where name='王海波');	
-- 47.列出与'刘某'从事相同职位的所有员工，显示姓名、职位。
select name,job from emp where job=x;
select job from emp where name='刘某';
select name,job from emp where job=(select job from emp where name='刘某');
-- 48.列出薪资比'大数据部'部门(已知部门编号为30)所有员工薪资都高的员工信息，显示员工姓名、薪资和部门名称。	
-- 关联查询dept,emp 左外或者右外，有些员工没有部门也满足条件,先查所有
select emp.name,emp.sal,dept.name from dept right join emp on dept.id=emp.dept_id;

select emp.name,emp.sal,dept.name from dept right join emp on dept.id=emp.dept_id 
where sal>x;

select emp.name,emp.sal,dept.name from dept right join emp on dept.id=emp.dept_id 
where sal>(select max(sal) from emp where dept_id=30);
-- 49.列出在'培优部'任职的员工，假定不知道'培优部'的部门编号， 显示部门名称，员工名称。
-- 关联查询两张表	
别名
select d.name,e.name from dept d,emp e where e.dept_id = d.id;	
-- 求出在培优部的员工
select d.name,e.name from dept d,emp e where e.dept_id = d.id and d.name='培优部';
-- 50.(自查询)列出所有员工及其直接上级，显示员工姓名、上级编号，上级姓名
-- 自查询：都在一张表，但是要查两次
emp e1 员工表
emp e2 上级表
两表通过e1.topid=e2.id 关联两表
select e1.name,e2.id,e2.name from emp e1,emp e2 where e1.topid=e2.id;

-- 51.列出最低薪资大于1500的各种职位，显示职位和该职位最低薪资		
-- 求出每种职位的最低薪资
select job,min(sal) from emp group by job;
-- 求出最低薪资大于1500的职位有哪些
where是在分组前过滤
分组后过滤用having
select job,min(sal) from emp group by job having min(sal)>1500;

where和having的区别
都可用于筛选过滤：
1.where用于分组之前过滤，having用于分组之后过滤
2.where子句不能使用统计函数（count/sum/avg/max/min）,having中可以
3.where子句不能使用列别名，having中可以使用列别名

列出在每个部门就职的员工数量、平均工资。显示部门编号、员工数量，平均薪资。
	-- 根据部门/部门编号进行分组
	select * from emp group by dept_id;
	-- 统计每个组（部门）的员工人数和平均薪资
	select dept_id,count(*),avg(sal) from emp group by dept_id;
-- 53.查出至少有一个员工的部门。显示部门编号、部门名称、部门位置、部门人数。
	-- 关联查询两张表(dept, emp)
	select * from dept d,emp e where d.id=e.dept_id;
	-- 替换要显示的列和统计部门人数
	select d.id,d.name,d.loc,count(*) from dept d,emp e where d.id=e.dept_id group by d.id;
-- 54.列出受雇日期早于直接上级的所有员工的编号、姓名、部门名称
列: e1.id, e1.name, d.name
表:	emp e1: 员工表
	emp e2: 上级表
	dept d: 部门表
关联条件: e1.topid=e2.id
		e1.dept_id=d.id
		e1.hdate<e2.hdate  */
-- 三表联查，找中间表
select e1.id,e1.name,d.name from emp e1,emp e2,dept d 
where e1.topid=e2.id and e1.dept_id=d.id and e1.hdate<e2.hdate;

-- 55.列出每个部门薪资最高的员工信息，显示部门编号、员工姓名、薪资
-- 查询emp表中所有员工的部门编号、姓名、薪资
select dept_id,name,sal from emp;
-- 查询emp表中每个部门的最高薪资，显示部门编号、最高薪资
select dept_id,max(sal) from emp group by dept_id;
	-- 错误，会把第一个人名拿过来
select dept_id,max(sal),name from emp group by dept_id;	
-- 第二次查询的结果作为一张临时表和第一次查询进行关联查询
	-- 把max(sal)和一张临时表的sal关联查询，同时部门编号也要相等
	max(sal)=sal
	dept_id=dept_idid		
	-- emp里面没有maxsal，只有临时表里有，临时表已经改名成t1了，得用t1调maxsal别名
select emp.dept_id,t1.maxsal,emp.name from emp,(select dept_id,max(sal) maxsal from emp group by dept_id) t1 where t1.dept_id=emp.dept_id and t1.maxsal=emp.sal;
select emp.dept_id,emp.sal,emp.name from emp,(select dept_id,max(sal) maxsal from emp group by dept_id) t1 where t1.dept_id=emp.dept_id and t1.maxsal=emp.sal;

-- 数据库的备份
通过mysqldump.exe程序对数据库中数据备份，
cmd窗口未登录sql状态下输入：
mysqldump -u 用户名 -p 备份的数据库名 > F:/files/tedu/杂项/xx.sql
例如：讲db40库中的数据备份到F:/files/tedu/杂项/db40.sql文件中：
mysqldump -u root -p db40 > F:/files/tedu/杂项/db40.sql
回车后键入密码，到指定位置下寻找db40.sql文件

改库名的方式
可以把数据恢复到别的数据库中，相当于改库名

-- 恢复数据库
1.cmd窗口未登录sql状态下输入：
通过mysql.exe程序可以将备份的数据恢复到某一个库中：
mysql -u 用户名 -p 恢复的库名 < F:/files/tedu/杂项/db40.sql
例如：
创建一个db60库，将db40备份恢复到db60库中
mysql -u root -p db60 < F:/files/tedu/杂项/db40.sql
2.在cmd窗口中，已登录mysql状态下，通过source命令，可以执行指定位置下的sql脚本文件中的sql语句。
例如：
建db80，进入db80库，通过source将db40.sql恢复到db80中：
恢复之前先
set names gbk;
source F:/files/tedu/杂项/db40.sql;

补充1、笛卡尔积查询：
	笛卡尔积查询：如果同时查询两张表，左边表有m条数据，右边表有n条数据，那么笛卡尔积查询是结果就是 m*n 条记录。这就是笛卡尔积查询。例如： 
	select * from dept,emp;
	上面的查询中包含大量错误的数据, 一般不使用这种查询。
	
	如果只想保留正确的记录，可以通过where条件进行筛选，将符合条件的保留下来，不符合条件的自然就会被剔除，例如：
	select * from dept,emp
	where dept.id=emp.dept_id;

补充2、左外连接和右外连接查询：
	(1) 左外连接查询：是将左边表中所有数据都查询出来, 如果在右边表中没有对应的记录, 右边表显示为null即可。
	(2) 右外连接查询：是将右边表中所有数据都查询出来, 如果在左边表中没有对应的记录, 左边表显示为null即可。

补充3、where和having都用于筛选过滤，但是： 
	(1) where用于在分组之前进行筛选, having用于在分组之后进行筛选
	(2) 并且where中不能使用列别名, having中可以使用别名
	(3) where子句中不能使用列别名(可以使用表别名), 因为where子句比select先执行!!
	
补充4、SQL语句的书写顺序和执行顺序:
  SQL语句的书写顺序：
	select...
	from...
	where...
	group by...
	order by...
    limit...
	...
  SQL语句的执行顺序：
	from... -- 确定要查询的是哪张表 (定义表别名)
	where... -- 从整张表的数据中进行筛选过滤
	select... -- 确定要显示哪些列 (定义列别名)
	group by... -- 根据指定的列进行分组
	order by... -- 根据指定的列进行排序
    limit...
	...
-------------------
在数据库中有两种基本的锁类型：排它锁（Exclusive Locks，即X锁）和共享锁（Share Locks，即S锁）。当数据对象被加上排它锁时，其他的事务不能对它读取和修改。加了共享锁的数据对象可以被其他事务读取，但不能修改。数据库利用这两种基本的锁类型来对数据库的事务进行并发控制。
-------------------
题目：
student_score:

id,
user_code, 学号
class_name, 学科
score 分数

1.1查学号和平均分，平均分>=60,学号，平均分，从大到小排序
select user_code,avg(score) avg_score from student_score group by user_code
having avg(score)>=60
order by user_code desc;
1.2从如上筛选出，每个课程分数都>=60的学号
select user_code from student_score
group by user_code having avg(score) >= 60
and user_code not in(select user_code from student_score where score<60);
1.3添加分页，只显示11~20条
select user_code from student_score
group by user_code having avg(score) >= 60
and user_code not in(select user_code from student_score where score<60)
limit 10,10;

二、
业务培训信息三表
s(s#,sn,sd,sa) 学号，学员姓名，所属单位，学员年龄
c(c#,cn) 课程编号，课程名称
sc(s#,c#,g) 学号，所选的课程编号，学习成绩

2.1查询选修课程名称为"java编程"的学员学号和姓名
select s#,sn from s where s# in(
	select s# from c,sc where c.c#=sc.c# and cn='java编程'
);·

2.2查询不选修课程编号为"cs"的学员姓名和所属单位
select sn,sd from s where s# not in(
	select s# from sc where c#='cs';
);

2.3查询选修了课程的学员人数
select count(distinct s#) from sc;

2.4查询选修课程超过5门的学员学号和所属单位
select s#,sd from s where s# in(
	select s# from sc group by s# having count(c#)>5;
);

2.5查询两门以上（含两门）不及格课程的学生姓名及其平均成绩
select sn,avg(ifnull(g,0)) from s,sc where s.s#=sc.s# and s.s# in (
	select s# from sc where g<60 group by s# having count(*)>=2
) group by sn;

2.6列出既学过"java编程"又学过"项目管理"课程的所有学生姓名
select sn from s where s# in(
	select s# from c,sc where c.c#=sc.c# and cn in ('java编程','项目管理') group by s#  
	having count(sc.c#)=2
);
-------------------
格式：
select xx from xx where xx group by xx having xx;
-------------------
事务
数据库事务：将一堆sql语句绑定在一起执行，执行的结果是要么全执行成功，要么全部执行失败

举例：
银行转账，A,B各有1000元，A转账给B 100元

开启事务
update acc set money=money-100 where name='A';
update acc set money=money+100 where name='B';
结束事务：提交（全成功了）/回滚（任何一条没成功，回滚）

事务的四大特征：
1.原子性 事务中的所有sql语句是一个整体，不能再分割，要么全执行成功，要么全执行失败
2.一致性 事务前后的业务数据之和是保持不变的。比如A,B各有1000元，A转账给B 100元，而转账操作在一个事务中，不管转账成功与否，A和B的总金额之和是保持不变的
3.隔离性 在隔离级别足够高的情况下，事务和事务是完全隔离开来的，一个事务是看不到另一个事务正在进行中的操作。
能看到的要么是一个事务开始之前的状态，要么看到事务结束之后的状态
比如：
事务1：正在查询A和B的账户金额总和
第一次查询：A 1000,B 1000
第二次查询：A 1000,B 1000
事务2：正在进行转账操作
A-100 900  B还没加上  事务1看不到
4.持久性 
在事务提交后，对数据的修改将会是永久的，数据的修改也会持久的保存到硬盘上
比如：
A-100 成功了  日志：记录A账户要减去100元
b+100 失败了  日志：记录B账户要加上100元
回滚相当于擦除日志
提交事务，会按照日志进行操作

mysql中的事务：
在mysql中默认一条sql是一个事务
mysql中：
开启事务：start transaction;
结束事务：commit(提交)/rollback(回滚);
例子：
A转账100元给B账户
-- 开启事务
start transaction;
-- A账户减去100元
update acc set money=money-100 where name='A';
-- B账户加上100元
update acc set money=money+100 where name='B';
-- 结束事务
rollback / commit;

事务的并发读问题
1.脏读 在隔离级别最低的情况下发生
在一个事务中，读取了另外一个事务未提交的数据
mysql，oracle默认不会允许脏读
举例：
A 给 B 转账100元
事务一：
修改了，未提交，通知B查账
事务二：
B已经读到了B多了100
事务一回滚了
2.不可重复读
在一个事务中，读取到了另外一个事务已提交的数据，导致前后两次的提交结果不一致
在两次查询之间，有另外的事务对查询的记录进行了修改操作
例子：
查询
事务一：修改，提交了
查询
两次查询结果不一致
3.幻读
在一个事务中，对同一张表的两次查询结果不一致，因为有别的事务对表进行了插入或者删除操作
例子：
查询id为3，未找到
另外事务中：
插入了id为3的数据，提交
插入id为3，插入失败，显示已存在

事务隔离级别 四个等级
set tx_isolation='read-uncommitted';
1、READ UNCOMMITTED（读未提交数据）
安全级别最低, 可能出现任何事务并发问题(比如脏读、不可以重复读、幻读等)
性能最好（不使用!!）
2、READ COMMITTED（读已提交数据）（Oracle默认）
防止脏读，没有处理不可重复读，也没有处理幻读；
性能比REPEATABLE READ好
3、REPEATABLE READ（可重复读）（MySQL默认）
防止脏读和不可重复读，不能处理幻读问题；
性能比SERIALIZABLE好
4、SERIALIZABLE（串行化）
不会出现任何并发问题，因为它是对同一数据的访问是串行的，非并发访问的；
性能最差；

MySQL的默认隔离级别为REPEATABLE READ，即可以防止脏读和不可重复读

设置隔离级别:
MySQL查询当前的事务隔离级别:
select @@tx_isolation;

JDBC设置事务隔离界别:
JDBC中通过Connection提供的方法设置事务隔离级别：
Connection. setTransactionIsolation(int level)
参数可选值如下：
Connection.TRANSACTION_READ_UNCOMMITTED       1（读未提交数据）
Connection.TRANSACTION_READ_COMMITTED     2（读已提交数据）
Connection.TRANSACTION_REPEATABLE_READ    4（可重复读）
Connection.TRANSACTION_SERIALIZABLE           8（串行化）
Connection.TRANSACTION_NONE               0（不使用事务）

JDBC中默认是自动提交事务，conn.setAutoCommit(true); 
所以需要关闭自动提交，改为手动提交事务
conn.setAutoCommit(false); 
try{
	conn = JDBCUtil.getConn();
	conn.setAutoCommit(false); 
	...
	conn.commit();// 提交
}catch(Exception e){
	conn.rollback();// 回滚
}
-------------------
sql中相等为一个=号
where name='张三'

物理删除 真正从数据库删除
逻辑删除 给个标识，从数据库中过滤掉，不显示

mysql名称连接用_，不用驼峰
转到java转驼峰
-------------------
在mysql中查数据库的函数
? functions;
-------------------
mysql没有布尔类型
-------------------
mysql添加索引
普通单列索引：
ALTER TABLE sys_user ADD INDEX index_usercode (usercode)
组合索引（最左前缀原则）：
ALTER TABLE sys_user ADD INDEX index_usercode_deptcode (usercode,deptcode)
-------------------
分组排名
分组取最新
//INNER JOIN表连接
SELECT o.driver_code,o.STATUS,o.create_at 
FROM th_xdhy_order o 
INNER JOIN (SELECT driver_code,MAX(create_at) max_time FROM th_xdhy_order GROUP BY driver_code) m
ON o.driver_code=m.driver_code AND o.create_at=m.max_time

//EXISTS函数
SELECT o.driver_code,o.status,o.create_at
FROM th_xdhy_order o
WHERE EXISTS
(SELECT 1 FROM 
(SELECT MAX(create_at) max_time,driver_code FROM th_xdhy_order GROUP BY driver_code) t
WHERE o.driver_code = t.driver_code AND o.create_at=t.max_time)

//窗口函数
SELECT driver_code,STATUS,create_at 
FROM (SELECT driver_code,STATUS,create_at,dense_rank() over (PARTITION BY driver_code ORDER BY create_at DESC) AS ranking 
FROM th_xdhy_order)
NEW WHERE ranking=1
-------------------
建表优化
条件列表查询中的字段可以冗余，因为列表查询人数多，单人根据条件查询的次数也多，又是返回List，所以可以字段冗余
详情一般可以通过关联表查询，不用冗余，因为详情查询次数少，也没有条件重新查询。

发布文章，文章表的正文这一字段可以独立出一张表，因为正文文本量大，会导致主表慢。
-------------------
批量insert
insert into 表名 (列1，列2，列3...) values(值1，值2，值3...),(值1，值2，值3...);

批量update
一条语句执行多个update操作
如：
update tableName set creator_name = '1', a = '1' where id = 1;update tableName set creator_name = '2', a = '2' where id = 2;

写法1：
update tableName set 
creator_name = (case id when 1 then '1' when 2 then '2' else creator_name end),
creator = (case id when 1 then 1 when 2 then 2 else creator end)

写法2（推荐）：
update tableName SET 
creator_name = CASE id 
WHEN 1 THEN '2value'
WHEN 2 THEN '3value'
end,
creator = CASE id 
WHEN 1 THEN 3
WHEN 2 THEN 4
end
WHERE id IN (1, 2)
------------
数据量大时，一条sql多次left join，比分成多条sql计算量大很多
订单表1万
货源表1万
订单节点7万

一条sql三个left join计算量：
订单left join货源left join订单节点 = 1万*1万*7万 = 70000万万

分两条sql计算量：
订单left join货源 = 1万*1万
用订单id单独查订单节点表 = 7万
1万*1万+7万 = 10007万
------------
nosql:

nosql对于sql的补充，读取时不必读取整行，降低开销，对读远多于写的数据放入nosql，增大服务支持的并发量
比如mysql中常读数据放入redis

kv型nosql redis
------------
搜索型NoSql ElasticSearch
倒排索引

关键字 => 文档的映射表

支持全文搜索，条件查询

在内存运行

索引（Index）=> 数据库（Database）。
类型（Type）=> 表（Table）。
文档（Document）=> 表中的一行记录（Row）。
属性（Field）=> 字段列（Column）。
------------
列式NoSql HBase（大数据）
单列加上id主键

查询时读取指定列，数据压缩率高（同一id多个单列，可以组成多列，字典表压缩）

存储量大、读写性能好
条件查询弱
------------
文档型NoSql MongoDB
常以JSON或者XML格式存储数据

扩展字段容易，对于非索引字段的查询，快于关系型数据库
------------
union 去重
union all 不去重
------------
查看mysql日志错误和警告部分
tail -n500 /var/log/mysqld.log|grep -E 'Warning|ERROR'
------------
查询结果按照in里的顺序输出
select id,en_name from table_a where id in(152224,152225,152220) 
order by field(id,152224,152225,152220);
------------
with as创建临时表
with
A的临时表 as
(
	select 需要的A表字段... from A表 where 某一分区
),
B的临时表 as
(
	select 需要的B表字段... from B表 where 某一分区
),
insert overwrite table xx partition(dt='2020-06-14')
select
    A的临时表.id,
    B的临时表.price
from A的临时表
left join B的临时表 on A的临时表.spu_id=B的临时表.id;
------------
java连接presto
1.pom.xml
<!-- presto依赖 -->
<dependency>
	<groupId>io.prestosql</groupId>
	<artifactId>presto-jdbc</artifactId>
	<version>312</version>
</dependency>

2.
public static void main(String[] args) {
	try {
		Connection conn = DriverManager.getConnection(
				"jdbc:presto://192.168.xx.xxx:xx/hive/xxx", "shonqian", null
		);
		Statement stmt = conn.createStatement();
		try {
			ResultSet rs = stmt.executeQuery("SELECT * from xxx");
			while(rs.next()) {
				String age = rs.getString(1);
				String name = rs.getString(2);
				System.out.println(String.format("age=%s, name=%s", age, name));
			}
		}
		finally {
			stmt.close();
			conn.close();
		}
	}
	catch (Exception e) {
		e.printStackTrace();
	}
}
------------
mysql视图
视图可以看作一个sql的别名，也可以说sql的封装
------------
linux操作postgresql
su postgres

psql -U postgres
psql -U postgres -d quartz(数据库名)

查看所有数据库
\l

查看所有表
\dt (按q退出)

查看表结构
\d 表名

切换入某一数据库
\c 数据库名字

查看某一数据库中所有表名 
select tablename from pg_tables;

退出数据库
ctrl + z

增删改查命令同mysql
------------
看页面建表
1.一主表
2.一对一：一主表，一分表。当字段多时，拆分为2表
3.一对多：一主表，一子表。一页面中有小列表时（特别是还能删改这种），小列表为子表
4.多对多：一主表，一主表，一中间表
------------
建表命名规范
主表子表（子表带上主表名）：
student
student_parent

test
test_subject

关联表（两个主表中间加上re，表示关联）：
student_re_test
------------
快速建表流程：
先按页面建主表，页面所需字段为主表字段，
主页面上还有小列表的（小列表能改删这种），就是主表的从表，建从表

不同页面，字段相同的主表可以归为一张主表

一个页面不同内容的，可分为多张主表
------------
树结构，用parentId关联
列表结构，可以用序号关联，也可以用parentId关联
------------
mysql新增用户
create user 'username'@'host' identified by 'password'
如：
create user 'a'@'ip1' identified by 'c'
%表示所有ip
create user 'username'@'%' identified by 'password'
默认只有test库权限

赋予b用户pra库下面所有表的权限
grant all privileges on pra.* to 'b'@'%' with grant option;

只赋予pra库的查、改权限
grant select,update on pra.* to 'b'@'%' with grant option;

给指定前缀表授权
SELECT CONCAT("GRANT all privileges ON database_name.", TABLE_NAME, " to 'b'@'%'")
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'database_name'
AND TABLE_NAME LIKE 'prefix_%'
将输出语句循环执行

查看用户授权
show grants for 'b'
------------
mysql窗口函数
和分组函数group by区别
group by会每组得到一条记录
窗口函数是将分组的结果置于每一条数据记录中
详见 https://blog.csdn.net/nmsLLCSDN/article/details/123287490
比如：
表中记录
a,b,c
普通max函数得到一条记录：3
窗口函数得到：
a 3,
b 3,
c 3
------------
left join，左边放小数据量表，右边放大数据量表，效率高
a表10条记录，b表20条记录，a是驱动表，数据量小效率高

left join中，on后面条件和where后面条件区别
on后面条件不影响主表行数和数据，会减少副表数据为null
where后面条件能减少主表行数

left join子连接
select aa.* from aa 
left join (select id,name from bb where id > 1) c 
on aa.id=c.id
------------
ON DUPLICATE KEY update
mysql insert记录时有则插入，没有则更新，Updated Rows=2，是insert语句不能加where
ON DUPLICATE KEY，如果insert值中有主键，则看主键是否重复，没有主键看唯一索引是否重复。
主键和唯一索引都重复，则报错
INSERT INTO user(id,username) VALUES(1,'a')
记录：
1,a
INSERT INTO user(id,username) VALUES(1,'aa') ON DUPLICATE KEY update id=2
记录：
2,a
INSERT INTO user(id,username) VALUES(2,'bb') ON DUPLICATE KEY update id=3,username='bb'
记录：
3,bb

insert into 多条记录时，动态取值
INSERT INTO user(id,username) VALUES(3,'cc') ON DUPLICATE KEY update id=VALUES(id),username=VALUES(username)
记录：
3,cc
------------
replace into，似乎性能比ON DUPLICATE KEY好
如果主键或者唯一索引重复，则先删除后插入。不重复则直接插入。语句比ON DUPLICATE KEY简洁，Updated Rows=2
replace INTO user(id,username) VALUES(3,'dd')
记录：
3,dd
也支持批量
replace into user(id,username) values(值1，值2),(值1，值2);
------------
insert/replace into select
insert/replace INTO user(id,username) select 4,username from user where id=1
------------
mysql
改字段名称用CHANGE，还可同时改类型和备注
ALTER TABLE table1 CHANGE a a1 DATE COMMENT 'aa';

不改字段名称MODIFY，可同时改类型和备注
ALTER TABLE table1 MODIFY COLUMN a DATE COMMENT 'aa';

增加字段
alter table table1 add b int comment "bb";

删除字段
ALTER TABLE table1 DROP COLUMN name;
------------
mysql看连接池当前连接线程
show processlist
sleep状态是线程池中待用线程
------------
mysql判断表是否存在
SHOW TABLES LIKE 'xxx'; // 无结果集，说明没有该表
ResultSet resultSet = MysqlUtil.executeQuery(mysqlConnAndStmt, "SHOW TABLES LIKE '" + tableName + "'");
boolean = resultSet.next(); // false说明无结果集
------------